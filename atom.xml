<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nan</title>
  
  <subtitle>Calming comes, Wisdom rises.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nannanmath.github.io/"/>
  <updated>2017-10-26T07:18:50.676Z</updated>
  <id>https://nannanmath.github.io/</id>
  
  <author>
    <name>nannanmath</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hadoop-8</title>
    <link href="https://nannanmath.github.io/2017/10/26/hadoop-8/"/>
    <id>https://nannanmath.github.io/2017/10/26/hadoop-8/</id>
    <published>2017-10-26T02:43:06.000Z</published>
    <updated>2017-10-26T07:18:50.676Z</updated>
    
    <content type="html"><![CDATA[<p>Hdfs block size.<br><a id="more"></a></p><h2 id="Block-size"><a href="#Block-size" class="headerlink" title="Block size"></a>Block size</h2><ol><li><p>Add property<br> Default blocksize is 128m, minimal blocksize is 1m.<br> Edit <strong><em>hdfs-site.xml</em></strong>, add property <code>dfs.blocksize</code>.</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dsf.blocksize<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>2k<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.fs-limits.min-block-size<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>1024<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure><p> <strong><em>Note: </em></strong> Too small blocksize can degrade performance.</p></li><li><p>Check</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$&gt; hdfs getconf -confKey dfs.blocksize  // show blocksize.</div></pre></td></tr></table></figure></li><li><p>Restart hadoop and put file</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$&gt; stop-dfs.sh</div><div class="line">$&gt; start-dfs.sh</div><div class="line">$&gt; hdfs dfs -put a.txt</div></pre></td></tr></table></figure></li><li><p>Put file by Hadoop API</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putFileWithBlocksize</span><span class="params">()</span> </span>&#123;</div><div class="line">    Configuration conf = <span class="keyword">new</span> Configuration();</div><div class="line">    conf.set(<span class="string">"fs.defaultFS"</span>, <span class="string">"hdfs://192.168.137.201:8020/"</span>);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        FileSystem fs = FileSystem.get(conf);</div><div class="line">        FSDataOutputStream fsdo = fs.create(<span class="keyword">new</span> Path(<span class="string">"/usr/win7admin/blocksize.txt"</span>),</div><div class="line">                <span class="keyword">true</span>, <span class="number">1024</span>, (<span class="keyword">short</span>)<span class="number">2</span>, <span class="number">1024</span>); <span class="comment">// replication: 2; block size: 1024.</span></div><div class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"D:/HexoSourceCode/source/_posts/new1.md"</span>);</div><div class="line">        IOUtils.copyBytes(fis, fsdo, <span class="number">1024</span>);</div><div class="line">        fis.close();</div><div class="line">        fsdo.close();</div><div class="line">        System.out.println(<span class="string">"over!"</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hdfs block size.&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="BigData" scheme="https://nannanmath.github.io/categories/BigData/"/>
    
    
      <category term="hadoop" scheme="https://nannanmath.github.io/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>hadoop-7</title>
    <link href="https://nannanmath.github.io/2017/10/19/hadoop-7/"/>
    <id>https://nannanmath.github.io/2017/10/19/hadoop-7/</id>
    <published>2017-10-19T07:27:09.000Z</published>
    <updated>2017-10-26T07:10:17.549Z</updated>
    
    <content type="html"><![CDATA[<p>Maven introduction.<br><a id="more"></a></p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><ol><li>Download from <a href="http://maven.apache.org/download.cgi" target="_blank" rel="external">Maven</a>.</li><li>Unzip and config <strong><em>path</em></strong>.</li></ol><h2 id="Maven-configuration"><a href="#Maven-configuration" class="headerlink" title="Maven configuration"></a>Maven configuration</h2><ol><li><p>Change repository<br> Edit <strong><em>${M2_HOME}/conf/settings.xml</em></strong></p><ul><li>remote repo<br>  &lt;mirror&gt;<br>  &lt;profile&gt;</li><li>Local repo<br>  Default repo is <strong><em>${USER_HOME}/.m2/repository</em></strong>.  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/path/to/local/repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></div></pre></td></tr></table></figure></li></ul></li><li><p>Project control</p><ul><li><p>Make <strong><em>pom.xml</em></strong> file in root dir of porject.</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0"&gt;</div><div class="line">&lt;project&gt;</div><div class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line">    &lt;groupId&gt;nan.learnjava&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;testmaven&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.0.0&lt;/version&gt;</div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure></li><li><p>Make dirs <strong><em>nan/learnjava/testmaven</em></strong>.</p></li><li><p>Create java source file <strong><em>HelloMaven.java</em></strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> nan.learnjava.testmaven;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloMaven</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Hello Maven!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>Compile and run</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$&gt; mvn clean compile    // compile</div><div class="line">$&gt; mvn clean package    // package jar</div><div class="line">$&gt; java -cp testmaven-1.0.0.jar nan.learnjava.testmaven.HelloMaven  // run</div></pre></td></tr></table></figure></li></ul></li></ol><h2 id="Private-Maven-Server"><a href="#Private-Maven-Server" class="headerlink" title="Private Maven Server"></a>Private Maven Server</h2><ol><li><p>NEXUS</p><ul><li>Download <strong><em>nexus-xxx-bundel.zip</em></strong> from <a href="https://www.sonatype.com/download-oss-sonatype" target="_blank" rel="external">NEXUS</a>.  </li><li>Unzip and set path env.  </li><li><p>Install service</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$&gt; nexus install  // install nexus service</div><div class="line">$&gt; nexus start    // start service</div><div class="line">$&gt; nexus restart  // restart service</div></pre></td></tr></table></figure></li><li><p>Open in browser<br>  Web site: <strong><em><a href="http://localhost:8081/nexus" target="_blank" rel="external">http://localhost:8081/nexus</a></em></strong></p></li></ul></li><li><p>Config of nexus</p><ul><li><p>Nexus repository path<br>  Edit file <strong><em>${NEXUS_HOME}/conf/nexus.properties</em></strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">applicaton-port=8081  #default port</div><div class="line">nexus-work=$&#123;bundleBasedir&#125;/../sonatype-work/nexus  #default repository path</div></pre></td></tr></table></figure></li><li><p>Log in<br>  username: admin<br>  password: admin123  </p></li><li>Update index<br>  <strong><em>Repositories –&gt; Central –&gt; Configuration –&gt; Download Remote Indexes –&gt; true</em></strong><br>  <strong><em>Central –&gt; Repair Index</em></strong></li></ul></li><li>Config of Maven<ul><li>Copy<br>  <strong><em>${M2_HOME}/conf/settings.xml</em></strong> to <strong><em>${HOME}/.m2/</em></strong></li><li>Edit <strong><em>settings.xml</em></strong>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--localRepository--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:/MyApps/mvn-local-repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--mirror--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>nexus repo for maven.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--profile--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">profile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">repository</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>central repos from nexus<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://central<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">releases</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://central<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">profiels</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--active--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></div></pre></td></tr></table></figure></li></ul></li></ol><h2 id="Archetype"><a href="#Archetype" class="headerlink" title="Archetype"></a>Archetype</h2><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$&gt; mvn archetype:generate -DarchetypeCatalog=internal</div></pre></td></tr></table></figure></code></pre><h2 id="Maven-for-Eclipse"><a href="#Maven-for-Eclipse" class="headerlink" title="Maven for Eclipse"></a>Maven for Eclipse</h2><ol><li>Config<br> <strong><em>Preference</em></strong> –&gt; <strong><em>Maven</em></strong> –&gt; <strong><em>User Setting</em></strong> –&gt; <strong><em>Global Settings</em></strong> –&gt; <strong><em>User Settings</em></strong></li><li>New Project<br> <strong><em>New</em></strong> –&gt; <strong><em>Project…</em></strong> –&gt; <strong><em>Maven</em></strong> –&gt; <strong><em>Maven Project</em></strong> –&gt; <strong><em>Location</em></strong> –&gt; <strong><em>Next</em></strong> –&gt; <strong><em>…</em></strong> ..<br> Input <strong><em>Group Id</em></strong>, <strong><em>Artifact Id</em></strong>, <strong><em>Version</em></strong>, <strong><em>Package</em></strong></li><li>Add dependencies<br> Edit <strong><em>pom.xml</em></strong> file, add dependency. <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Maven introduction.&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="BigData" scheme="https://nannanmath.github.io/categories/BigData/"/>
    
    
      <category term="hadoop" scheme="https://nannanmath.github.io/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>hadoop-6</title>
    <link href="https://nannanmath.github.io/2017/10/17/hadoop-6/"/>
    <id>https://nannanmath.github.io/2017/10/17/hadoop-6/</id>
    <published>2017-10-17T04:29:48.000Z</published>
    <updated>2017-10-19T05:36:20.338Z</updated>
    
    <content type="html"><![CDATA[<p>Hadoop API.<br><a id="more"></a></p><h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><ol><li>Get all <strong><em>.jar</em></strong> files in <code>hadoop-2.7.x/share/hadoop</code></li><li>Add to <strong><em>Build Path</em></strong><br> <strong><em>Build Path</em></strong> –&gt; <strong><em>Configure Build Path…</em></strong> –&gt; <strong><em>Libraries</em></strong> –&gt; <strong><em>Add External JARs…</em></strong><br> Add all <strong><em>.jar</em></strong> files.</li><li>Copy <strong><em>log4j.properties</em></strong> file to <strong><em>HadoopAPIDemo/src</em></strong> dir.</li></ol><h2 id="Hadoop-API"><a href="#Hadoop-API" class="headerlink" title="Hadoop API"></a>Hadoop API</h2><p>This functions are implemented by <strong><em>Configuration</em></strong> and <strong><em>FileSystem</em></strong> classes. <strong><em>Configuration</em></strong> is for configuring connections to remote HDFS and <strong><em>FileSystem</em></strong> is used to get file system of HDFS. Full Code can be found on <a href="https://github.com/nannanmath/HadoopLearning/blob/master/src/nan/javalearn/hadoopapi/TestHDFS.java" target="_blank" rel="external">github</a>.</p><ol><li><p>Read file</p><ul><li><p>By URL</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">URL.setURLStreamHandlerFactory(<span class="keyword">new</span> FsUrlStreamHandlerFactory());</div><div class="line">URL url = <span class="keyword">new</span> URL(<span class="string">"hdfs://192.168.137.201:8020/usr/centos/hadoop/a.txt"</span>);</div><div class="line">URLConnection conn = url.openConnection();</div><div class="line">InputStream is = conn.getInputStream();</div></pre></td></tr></table></figure></li><li><p>By API</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Configuration conf = <span class="keyword">new</span> Configuration();</div><div class="line">conf.set(<span class="string">"fs.defaultFS"</span>, <span class="string">"hdfs://192.168.137.201:8020"</span>);</div><div class="line">FileSystem fs = FileSystem.get(conf);</div><div class="line">Path p = <span class="keyword">new</span> Path(<span class="string">"/usr/centos/hadoop/a.txt"</span>);</div><div class="line">FSDataInputStream fis = fs.open(p);</div></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Configuration conf = <span class="keyword">new</span> Configuration();</div><div class="line">conf.set(<span class="string">"fs.defaultFS"</span>, <span class="string">"hdfs://192.168.137.201:8020"</span>);</div><div class="line">FileSystem fs = FileSystem.get(conf);</div><div class="line">Path p = <span class="keyword">new</span> Path(<span class="string">"/usr/centos/hadoop/a.txt"</span>);</div><div class="line">FSDataInputStream fis = fs.open(p);</div><div class="line">ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">IOUtils.copyBytes(fis, baos, <span class="number">1024</span>);  <span class="comment">// copy in hadoop api</span></div></pre></td></tr></table></figure></li></ul></li><li><p>Make directory<br> Give write permission: <code>$&gt; hdfs dfs -chmod 777 /usr</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Configuration conf = <span class="keyword">new</span> Configuration();</div><div class="line">conf.set(<span class="string">"fs.defaultFS"</span>, <span class="string">"hdfs://192.168.137.201:8020"</span>);</div><div class="line">FileSystem fs = FileSystem.get(conf);</div><div class="line">Path p = <span class="keyword">new</span> Path(<span class="string">"/usr/win7admin"</span>);</div><div class="line">fs.mkdirs(p);</div></pre></td></tr></table></figure></li><li><p>Put file</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Configuration conf = <span class="keyword">new</span> Configuration();</div><div class="line">conf.set(<span class="string">"fs.defaultFS"</span>, <span class="string">"hdfs://192.168.137.201:8020"</span>);</div><div class="line">FileSystem fs = FileSystem.get(conf);</div><div class="line">Path p = <span class="keyword">new</span> Path(<span class="string">"/usr/win7admin/win7.txt"</span>);</div><div class="line">FSDataOutputStream fsdos = fs.create(p);</div><div class="line">fsdos.writeBytes(<span class="string">"Hello, Windows7!"</span>);</div><div class="line">fsdos.close();</div></pre></td></tr></table></figure></li><li><p>Remove file</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Configuration conf = <span class="keyword">new</span> Configuration();</div><div class="line">conf.set(<span class="string">"fs.defaultFS"</span>, <span class="string">"hdfs://192.168.137.201:8020"</span>);</div><div class="line">FileSystem fs = FileSystem.get(conf);</div><div class="line">Path p = <span class="keyword">new</span> Path(<span class="string">"/usr/win7admin"</span>);</div><div class="line">fs.delete(p, <span class="keyword">true</span>);</div></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hadoop API.&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="BigData" scheme="https://nannanmath.github.io/categories/BigData/"/>
    
    
      <category term="hadoop" scheme="https://nannanmath.github.io/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>hadoop-5</title>
    <link href="https://nannanmath.github.io/2017/10/16/hadoop-5/"/>
    <id>https://nannanmath.github.io/2017/10/16/hadoop-5/</id>
    <published>2017-10-16T07:01:16.000Z</published>
    <updated>2017-10-17T04:29:33.796Z</updated>
    
    <content type="html"><![CDATA[<p>HDFS basic operations and configurations.<br><a id="more"></a></p><h2 id="Commands"><a href="#Commands" class="headerlink" title="Commands:"></a>Commands:</h2><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$&gt; hadoop version           // show version of hadoop.</div><div class="line">$&gt; hadoop fs                // hdfs</div><div class="line">$&gt; hadoop jar</div><div class="line">/***** File *****/</div><div class="line">// `hdfs dfs` equal to `hadoop fs`</div><div class="line">$&gt; hdfs dfs mkdir -p /usr/centos/hadoop                 // create dir on hdfs.</div><div class="line">$&gt; hdfs dfs -ls -R /                                    // list <span class="built_in">dirs</span> on hdfs.</div><div class="line">$&gt; hdfs dfs -put &lt;localfile&gt; &lt;hdfs dir&gt;                 // upload a file to hdfs.</div><div class="line">$&gt; hdfs dfs -rm &lt;remote dir/file&gt;                       // remove a dir/file on hdfs.</div><div class="line">$&gt; hdfs dfs -appendToFile &lt;localfile&gt; &lt;hdfsfile&gt;        // append a file on hdfs.</div><div class="line">$&gt; hdfs dfs -cat &lt;hdfsfile&gt;                             // `cat` a file on hdfs.</div></pre></td></tr></table></figure></code></pre><h2 id="Block-storage"><a href="#Block-storage" class="headerlink" title="Block storage"></a>Block storage</h2><ol><li>Block size<ul><li>Disk seek time: 10ms</li><li>Disk transmission timr: 100MB/s</li><li>Block size: 128MB</li><li>seek : transmission = 1 : 100</li></ul></li><li><p>Config tmp directory</p><ul><li>Show all config item for each modules<br>  Decompress <code>hadoop-2.7.4.tar.gz</code><br>  Get files <code>share/hadoop/[common | hdfs | mapredude | yarn]/hadoop-xxxx-2.7.4.jar</code> (<code>mapredude</code> –&gt; <code>hadoop-mapreduce-client-core-2.7.4.jar</code>)<br>  Decompress that file and get <code>xxxx-default.xml</code></li><li><p><code>core-site.xml</code><br>  <code>hadoop.tmp.dir</code>                is      <code>/home/centos01/hadoop</code></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$&gt; xsync hdfs-site.xml</div><div class="line">$&gt; hdfs namenode -format    // format namenode only</div><div class="line">$&gt; start-dfs.sh             // start hdfs</div></pre></td></tr></table></figure></li><li><p><code>hdfs-site.xml</code><br>  <code>dfs.namenode.name.dir</code>         is      <code>file://${hadoop.tmp.dir}/dfs/namenode</code>         // name node<br>  <code>dfs.namenode.data.dir</code>         is      <code>file://${hadoop.tmp.dir}/dfs/data</code>             // data node<br>  <code>dfs.namenode.checkpoint.dir</code>   is      <code>file://${hadoop.tmp.dir}/dfs/namesecondary</code>    // secondary name node</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$&gt; xsync hdfs-site.xml</div><div class="line">$&gt; hdfs namenode -format    // format namenode only</div><div class="line">$&gt; start-dfs.sh             // start hdfs</div></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HDFS basic operations and configurations.&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="BigData" scheme="https://nannanmath.github.io/categories/BigData/"/>
    
    
      <category term="hadoop" scheme="https://nannanmath.github.io/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>hadoop-4</title>
    <link href="https://nannanmath.github.io/2017/10/13/hadoop-4/"/>
    <id>https://nannanmath.github.io/2017/10/13/hadoop-4/</id>
    <published>2017-10-13T09:27:35.000Z</published>
    <updated>2017-10-13T10:20:46.027Z</updated>
    
    <content type="html"><![CDATA[<p>Hadoop start procedure.<br><a id="more"></a></p><h2 id="Processes"><a href="#Processes" class="headerlink" title="Processes"></a>Processes</h2><ol><li><code>start-dfs.sh</code><br> NameNode<br> SecondNameNode<br> DataNode</li><li><code>start-yarn.sh</code><br> ResourceManager<br> NodeManage</li></ol><h2 id="Scripts"><a href="#Scripts" class="headerlink" title="Scripts"></a>Scripts</h2><ol><li><code>sbin/start-all.sh</code><br> <code>libexec/hadoop-config.sh</code><br> <code>start-dfs.sh</code><br> <code>start-yarn.sh</code></li><li><code>sbin/start-dfs.sh</code><br> <code>libexec/hadoop-config.sh</code><br> <code>sbin/hadoop-daemon.sh --config ... --hostname ... start namenode ...</code><br> <code>sbin/hadoop-daemons.sh --config ... --hostname ... start datanode ...</code><br> <code>sbin/hadoop-daemon.sh --config ... --hostname ... start secondarynamenode ...</code><br> <code>sbin/hadoop-daemon.sh --config ... --hostname ... start zkfc ...</code></li><li><code>sbin/start-yarn.sh</code><br> <code>libexec/hadoop-config.sh</code><br> <code>sbin/yarn-daemon.sh start resourcemanager</code><br> <code>sbin/yarn-daemon.sh start nodemanager</code></li><li><code>sbin/hadoop-deamons.sh</code><br> <code>libexec/hadoop-config.sh</code><br> get slave node from <code>slaves</code> file<br> <code>hadoop-daemon.sh</code></li><li><code>sbin/hadoop-deamon.sh</code><br> <code>libexec/hadoop-config.sh</code><br> <code>bin/hdfs ...</code></li><li>Start process separately <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$&gt; hadoop-daemon.sh start namenode  // start namenode (run on master node)</div><div class="line">$&gt; hadoop-daemons.sh start datanode // start datanodes on 3 machines (run on master node, `hadoop-daemons.sh` will access slaves file)</div><div class="line">$&gt; hadoop-daemon.sh stop namenode   // stop namenode (run on master node)</div><div class="line">$&gt; hadoop-daemon.sh stop datanode   // stop datanode on that node who runs this <span class="built_in">command</span>.</div></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hadoop start procedure.&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="BigData" scheme="https://nannanmath.github.io/categories/BigData/"/>
    
    
      <category term="hadoop" scheme="https://nannanmath.github.io/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>java-reflection</title>
    <link href="https://nannanmath.github.io/2017/10/13/java-reflection/"/>
    <id>https://nannanmath.github.io/2017/10/13/java-reflection/</id>
    <published>2017-10-12T16:22:41.000Z</published>
    <updated>2017-10-26T06:29:18.108Z</updated>
    
    <content type="html"><![CDATA[<p>Java reflection and introspector.<br><a id="more"></a></p><h2 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h2><ol><li><p>Introduce<br> Class descriptor<br> Descripe features of class<br> <code>Class</code> DOES NOT rewrite <code>hashCode()</code> (returns position in memory)  </p> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Persion is a class</span></div><div class="line"><span class="comment">// Student is a class whitch extends Persion</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testClass</span><span class="params">()</span></span>&#123;</div><div class="line">    Persion p = <span class="keyword">new</span> Persion();</div><div class="line">    Student s = <span class="keyword">new</span> Student();</div><div class="line">    Class class1 = p.getClass();</div><div class="line">    Class class2 = Persion.class;</div><div class="line">    </div><div class="line">    System.out.println(p <span class="keyword">instanceof</span> Persion)            <span class="comment">//true</span></div><div class="line">    System.out.println(p.getClass() == Persion.class)   <span class="comment">//true</span></div><div class="line">    System.out.println(s <span class="keyword">instanceof</span> Persion)            <span class="comment">//true</span></div><div class="line">    System.out.println(s.getClass() == Persion.class)   <span class="comment">//false</span></div><div class="line">    </div><div class="line">    System.out.println(class1 == class2); <span class="comment">// true</span></div><div class="line">    System.out.println(class1.hashCode() == class2.hashCode()); <span class="comment">// true (position in memory)</span></div><div class="line">    System.out.println(class1.getName()); <span class="comment">// full name of Persion including package path</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>Method, Field</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Person class</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String name；</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"This is a private methed!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNewInstance</span><span class="params">()</span> throw Exception </span>&#123;</div><div class="line">    <span class="comment">/***Create Object Dynamically***/</span></div><div class="line">    <span class="comment">// Load class, return Class object.</span></div><div class="line">    Class clazz = Class.forName(<span class="string">"nan.javalearn.reflection.Persion"</span>);</div><div class="line">    <span class="comment">// Make object by Class.</span></div><div class="line">    Object obj = clazz.newInstance();</div><div class="line">    </div><div class="line">    <span class="comment">/***Method***/</span></div><div class="line">    <span class="comment">// Get `setName()` of Person</span></div><div class="line">    Method m1 = clazz.getDeclareMethod(<span class="string">"setName"</span>, String.class);</div><div class="line">    <span class="comment">// Call `setName()`</span></div><div class="line">    m1.invoke(obj, <span class="string">"tom"</span>);</div><div class="line">    </div><div class="line">    <span class="comment">// Get `getName()` of Person</span></div><div class="line">    Method m2 = clazz.getDeclareMethod(<span class="string">"getName"</span>);</div><div class="line">    Object ret = m2.invoke(obj);</div><div class="line">    System.out.println(ret);  <span class="comment">// tom</span></div><div class="line">    </div><div class="line">    <span class="comment">// Access private method</span></div><div class="line">    Method mp = clazz.getDeclareMethod(<span class="string">"talk"</span>);</div><div class="line">    mp.setAccessible(<span class="keyword">true</span>); <span class="comment">// Set accessible.</span></div><div class="line">    mp.invoke(obj);   <span class="comment">// Output: This is a private method!</span></div><div class="line">    </div><div class="line">    <span class="comment">// diff `getDeclareMethods()` and `getMethods()`</span></div><div class="line">    Method[] ms = clazz.getMethods();</div><div class="line">    <span class="keyword">for</span> (Method mm : ms) &#123;</div><div class="line">        Systom.out.println(mm); <span class="comment">// All methods including that extends from super class.</span></div><div class="line">    &#125;</div><div class="line">    ms = clazz.getDeclareMethods();</div><div class="line">    <span class="keyword">for</span> (Method mm : ms) &#123;</div><div class="line">        System.out.println(mm); <span class="comment">// Methods declared in this class.</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// Get all available methods start with "get".</span></div><div class="line">    ms = clazz.getMethods();</div><div class="line">    <span class="keyword">for</span> (Method mm : ms) &#123;</div><div class="line">        String fname = mm.getName();</div><div class="line">        Class[] pytpes = mm.getParameterTypes();</div><div class="line">        <span class="keyword">if</span> (fname.startsWith(<span class="string">"get"</span>) &amp;&amp; (ptypes == <span class="keyword">null</span> || ptypes.length == <span class="number">0</span>)) &#123;</div><div class="line">            <span class="keyword">int</span> mod = mm.getModifiers();  <span class="comment">// Get modifiers of this method.</span></div><div class="line">            System.out.println(Modifer.isPublic(mod));        <span class="comment">// If it is a public method.</span></div><div class="line">            ret = mm.invoke(obj);</div><div class="line">            System.out.println(fname + <span class="string">" = "</span> + ret);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/***Field***/</span></div><div class="line">    Field f = clazz.getDeclareField(<span class="string">"name"</span>);</div><div class="line">    f.setAccessible(<span class="keyword">true</span>);</div><div class="line">    ret = f.get(obj);</div><div class="line">    System.out.println(ret);  <span class="comment">// Output: tom.</span></div><div class="line">    f.set(obj, <span class="string">"jerry"</span>);  <span class="comment">// set `name` to `jerry`.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>Constructor</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person2</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person2</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConstructor</span><span class="params">()</span> throw Exception </span>&#123;</div><div class="line">    Class clazz = Class.forName(<span class="string">"nan.javalearn.reflect.Person2"</span>);</div><div class="line">    Constructor cs = clazz.getDeclaredConstructor(String.class);</div><div class="line">    Object obj = cs.newInstance(<span class="string">"tom"</span>);</div><div class="line">    System.out.println(obj);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>Copy Properties</p><ul><li><p>By Filed</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person3</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person3</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">propCopy</span><span class="params">(Person3 p1, Person3 p2)</span></span>&#123;</div><div class="line">    Class clazz = p1.getClass();</div><div class="line">    Field[] fs = clazz.getDeclareFields();</div><div class="line">    <span class="keyword">for</span>(Field f : fs) &#123;</div><div class="line">        f.setAccessible(<span class="keyword">true</span>);</div><div class="line">        Object ret = f.get(a);</div><div class="line">        f.set(b, ret);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>By Method<br>  Full code can be found in <a href="https://nannanmath.github.io">github</a></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyProperty</span><span class="params">(Object a, Object b)</span> </span>&#123;</div><div class="line">    Method[] ms = a.getClass().getDeclaredMethods();</div><div class="line">    Class bclazz = b.getClass();</div><div class="line">    <span class="keyword">for</span> (Method m : ms) &#123;</div><div class="line">        String mname = m.getName();</div><div class="line">        Class[] paramTypes = m.getParameterTypes();</div><div class="line">        Class retType = m.getReturnType();</div><div class="line">    </div><div class="line">        <span class="keyword">if</span> (mname.startsWith(<span class="string">"get"</span>)</div><div class="line">            &amp;&amp; (paramTypes == <span class="keyword">null</span> || paramTypes.length == <span class="number">0</span>)</div><div class="line">            &amp;&amp; retType != <span class="keyword">void</span>.class) &#123;</div><div class="line">            String bmname = mname.replace(<span class="string">"get"</span>, <span class="string">"set"</span>);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Method bm = bclazz.getDeclaredMethod(bmname, retType);</div><div class="line">                Object retVal = m.invoke(a);</div><div class="line">                bm.invoke(b, retVal);</div><div class="line">            &#125;  <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul></li></ol><h2 id="Other-examples"><a href="#Other-examples" class="headerlink" title="Other examples"></a>Other examples</h2><ol><li>Proxy pattern<br> <a href="https://github.com/nannanmath/JavaReflection/blob/master/src/nan/learnjava/reflection/proxy/duration/TestDuration.java" target="_blank" rel="external">full code</a></li><li>Build object from config file<br> <a href="https://github.com/nannanmath/JavaReflection/blob/master/src/nan/learnjava/reflection/buildfromfile/BuildFromFile.java" target="_blank" rel="external">full code</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java reflection and introspector.&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Program" scheme="https://nannanmath.github.io/categories/Program/"/>
    
    
      <category term="Java" scheme="https://nannanmath.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>jvm</title>
    <link href="https://nannanmath.github.io/2017/10/11/jvm/"/>
    <id>https://nannanmath.github.io/2017/10/11/jvm/</id>
    <published>2017-10-11T14:29:39.000Z</published>
    <updated>2017-10-12T02:20:13.644Z</updated>
    
    <content type="html"><![CDATA[<p>Introduce some concepts about JVM.<br><a id="more"></a></p><h2 id="Runtime-data-area"><a href="#Runtime-data-area" class="headerlink" title="Runtime data area"></a>Runtime data area</h2><ol><li>Method area<br> class descriptor<br> class loaded once only, <code>Class.forName(&quot;xxx&quot;)</code><br> shared by threads</li><li>Heap<br> objects and arrays<br> shared by threads</li><li>Java stack<br> each thread needs a stack<br> each process has one thread at least</li><li>Native method stack<br> native methods  </li><li>Program counter register</li></ol><h2 id="JVM-memory"><a href="#JVM-memory" class="headerlink" title="JVM memory"></a>JVM memory</h2><ol><li>Heap<ul><li>Young<br>  Eden space<br>  Survivor-0 space<br>  Survivor-1 space</li><li>Old<br>  Old generation space</li></ul></li><li>Non-heap<br> Meta space<br> Code cache<br> Compressed class space</li></ol><h2 id="Monitors"><a href="#Monitors" class="headerlink" title="Monitors"></a>Monitors</h2><ol><li><p>jvisualvm</p><ul><li><p>Open</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$&gt; jvisualvm    // open jvisualvm</div></pre></td></tr></table></figure></li><li><p>Plugin<br>  Tools –&gt; Plugins –&gt; visual gc –&gt; install</p></li></ul></li><li>jconsole<br> mem: heap and non-heap</li><li>jmap <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$&gt; jmap -heap pid           // show heap info</div><div class="line">$&gt; jmap -permstat pid       // show permnent space info</div><div class="line">$&gt; jmap -clstats pid        // show class loader info</div></pre></td></tr></table></figure></li></ol><h2 id="Modify-heap"><a href="#Modify-heap" class="headerlink" title="Modify heap"></a>Modify heap</h2><pre><code>Debug --&gt; Debug Configurations --&gt; Arguments --&gt; VM arguments  `-Xms` --&gt; set heap initial size (1/64 mem size)[`-Xms300m`]  `-Xmx` --&gt; set heap max size (1/4 mem size)[`-Xmx300m`]  `-Xmn` --&gt; set young space size (eden + s0 + s1)[`-Xmn150m`]  `-XX:NewSize` --&gt; set young space size [`-XX:NewSize=150m`]  `-XX:MaxNewSize` --&gt; set young space max size [`-XX:MaxNewSize=150m`]  `-XX:PermSize` --&gt; set permnent space size [`-XX:PermSize=150m`]  `-XX:MaxPermSize` --&gt; set permnent space max size [`-XX:MxPermSize=150m`]  ---------young space : old space = 1 : 2  eden : survivor = 3 : 1  </code></pre><h2 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h2><p><img src="/2017/10/11/jvm/classloader.jpg" alt="classloader"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Introduce some concepts about JVM.&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="BigData" scheme="https://nannanmath.github.io/categories/BigData/"/>
    
    
      <category term="java" scheme="https://nannanmath.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>hadoop-3</title>
    <link href="https://nannanmath.github.io/2017/10/09/hadoop-3/"/>
    <id>https://nannanmath.github.io/2017/10/09/hadoop-3/</id>
    <published>2017-10-09T09:29:17.000Z</published>
    <updated>2017-10-13T08:27:29.113Z</updated>
    
    <content type="html"><![CDATA[<p>Full destributed module.<br><a id="more"></a></p><h2 id="Design"><a href="#Design" class="headerlink" title="Design"></a>Design</h2><pre><code>NameNode: s201  DataNode: s202, s203, s204</code></pre><h2 id="Config-of-Hadoop"><a href="#Config-of-Hadoop" class="headerlink" title="Config of Hadoop"></a>Config of Hadoop</h2><ol><li><p><code>core-site.xml</code></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;property&gt;</div><div class="line">    &lt;name&gt;fs.defaultFS&lt;/name&gt;</div><div class="line">    &lt;value&gt;hdfs://s201/&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div></pre></td></tr></table></figure></li><li><p><code>hdfs-site.xml</code></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;property&gt;</div><div class="line">    &lt;name&gt;dfs.replication&lt;/name&gt;</div><div class="line">    &lt;value&gt;3&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div></pre></td></tr></table></figure><p> There are 3 datanodes.</p></li><li><code>mapred-site.xml</code><br> Don not need to modify.</li><li><p><code>yarn-site.xml</code></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;property&gt;</div><div class="line">    &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</div><div class="line">    &lt;value&gt;s201&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">    &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</div><div class="line">    &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div></pre></td></tr></table></figure><p> resourcemanager is s201.</p></li><li>Clear<br> Remove all of <code>${HADOOP_HOME}/logs</code> and <code>/tmp</code>.<h2 id="Clone-VMs-and-Test"><a href="#Clone-VMs-and-Test" class="headerlink" title="Clone VMs and Test"></a>Clone VMs and Test</h2></li><li>Clone<br> Clone –&gt; Create a full done</li><li>Config hostname and network<ul><li>hostname<br>  Edit <code>/etc/sysconfig/network</code><br>  Change <code>HOSTNAME=s20x</code></li><li>Network<ul><li>IP<br>  Edit <code>/etc/sysconfig/network-scripts/ifcfg-ehtx</code><br>  Remove <code>HWADDR</code> and <code>UUID</code><br>  Change <code>IPADDR=xxx.xxx.xxx.20x</code></li><li>Card info<br>  Remove <code>/etc/udev/rules.d/70-persistent-net.rules</code>  </li><li>Restart network</li></ul></li></ul></li><li>Ssh without password<br> Config <code>s201</code> login others without password.</li><li><p>Start hadoop</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$&gt; hadoop namenode -format</div><div class="line">$&gt; start-all.sh</div></pre></td></tr></table></figure><p> WebUI: <code>http://192.168.137.201:50070</code><br> Click Datanodes –&gt; 3 datanodes</p></li></ol><h1 id="Config-by-script"><a href="#Config-by-script" class="headerlink" title="Config by script"></a>Config by script</h1><ol><li>Install <code>rsync</code> package</li><li><p>Edit <code>xcall.sh</code> to run command on all nodes</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">param=<span class="variable">$@</span></div><div class="line">ip=201</div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -lt 1 ]; <span class="keyword">then</span></div><div class="line">    <span class="built_in">echo</span> parameters less than 1</div><div class="line">    <span class="built_in">exit</span> 1</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (( ; ip&lt;=204; ip=<span class="variable">$ip</span>+1 )); <span class="keyword">do</span></div><div class="line">    <span class="built_in">echo</span> =============host: <span class="variable">$&#123;ip&#125;</span>============</div><div class="line">    ssh s<span class="variable">$ip</span> <span class="string">"<span class="variable">$&#123;param&#125;</span>"</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure></li><li><p>Edit <code>xrsync.sh</code> copy file to other nodes</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -lt 1 ]; <span class="keyword">then</span></div><div class="line">    <span class="built_in">echo</span> no param</div><div class="line">    <span class="built_in">exit</span> 1</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line">path=<span class="variable">$1</span></div><div class="line"></div><div class="line">dir=$(dirname <span class="variable">$path</span>)</div><div class="line">filename=$(basename <span class="variable">$path</span>)</div><div class="line"></div><div class="line"><span class="built_in">cd</span> <span class="variable">$dir</span></div><div class="line">fullpath=$(<span class="built_in">pwd</span> -P .)</div><div class="line">user=$(whoami)</div><div class="line"><span class="keyword">for</span> (( ip=202; ip&lt;=204; ip=<span class="variable">$ip</span>+1 )); <span class="keyword">do</span></div><div class="line">    <span class="built_in">echo</span> ============node: s<span class="variable">$ip</span>=============</div><div class="line">    rsync -lr <span class="variable">$&#123;path&#125;</span> <span class="variable">$&#123;user&#125;</span>@s<span class="variable">$&#123;ip&#125;</span>:<span class="variable">$&#123;fullpath&#125;</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Full destributed module.&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="BigData" scheme="https://nannanmath.github.io/categories/BigData/"/>
    
    
      <category term="hadoop" scheme="https://nannanmath.github.io/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>hadoop-2</title>
    <link href="https://nannanmath.github.io/2017/10/09/hadoop-2/"/>
    <id>https://nannanmath.github.io/2017/10/09/hadoop-2/</id>
    <published>2017-10-09T05:15:09.000Z</published>
    <updated>2017-10-11T02:41:17.647Z</updated>
    
    <content type="html"><![CDATA[<p>Use Hadoop pesudo distributed.<br><a id="more"></a></p><h2 id="Start-Hadoop"><a href="#Start-Hadoop" class="headerlink" title="Start Hadoop"></a>Start Hadoop</h2><ol><li><p>Specify Env for Hadoop<br> Edit <code>${HADOOP_HOME}/etc/hadoop/hadoop_env.sh</code></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> JAVA_HOME=/opt/jdk</div></pre></td></tr></table></figure></li><li><p>Start all processes</p><ul><li><p>Format and start</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$&gt; hadoop namenode -format  // format file system</div><div class="line">$&gt; start-all.sh             // start all processes</div><div class="line">$&gt; jps                      // check processes</div></pre></td></tr></table></figure></li><li><p>Check file system by WebUI</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$&gt; /etc/init.d/iptables stop    // stop firewall</div></pre></td></tr></table></figure><p>  Open in browser:<br>  <code>http://localhost:50070</code></p></li></ul></li><li>Check HDFS file system <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$&gt; hdfs dfs -ls /</div><div class="line">$&gt; hdfs dfs -mkdir -p /usr/centos01/hadoop  // make a directory</div><div class="line">$&gt; hdfs dfs -lsr /</div></pre></td></tr></table></figure></li></ol><h2 id="Hadoop-Introduce"><a href="#Hadoop-Introduce" class="headerlink" title="Hadoop Introduce"></a>Hadoop Introduce</h2><ol><li>Hadoop ports<br> 50070 –&gt; namenode http port<br> 50075 –&gt; datanode http port<br> 50090 –&gt; 2nd namenode http port<br> 8020 –&gt;  namenode rpc port<br> 50010 –&gt; datanode rpc port</li><li>Hadoop 4 modules<ul><li>common + hdfs<br>  NameNode, SecondaryNameNode, DataNode</li><li>mapred + yarn<br>  NodeManager, ResourceManager</li></ul></li><li>Hadoop scripts<ul><li>ALL<br>  <code>start-all.sh</code>: start all nodes<br>  <code>stop-all.sh</code>:  stop all nodes</li><li>HDFS<br>  <code>start-dfs.sh</code>: NameNode, DataNode, 2ndNameNode<br>  <code>stop-dfs.sh</code> :</li><li>YARN:<br>  <code>start-yarn.sh</code>: NodeManager, ResourceManager<br>  <code>stop-yarn.sh</code>:</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Use Hadoop pesudo distributed.&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="BigData" scheme="https://nannanmath.github.io/categories/BigData/"/>
    
    
      <category term="hadoop" scheme="https://nannanmath.github.io/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>hadoop-1</title>
    <link href="https://nannanmath.github.io/2017/10/08/hadoop-1/"/>
    <id>https://nannanmath.github.io/2017/10/08/hadoop-1/</id>
    <published>2017-10-08T09:14:19.000Z</published>
    <updated>2017-10-12T07:48:06.269Z</updated>
    
    <content type="html"><![CDATA[<p>Start to introduce Hadoop.<br><a id="more"></a></p><h2 id="Show-Full-Path-in-Term"><a href="#Show-Full-Path-in-Term" class="headerlink" title="Show Full Path in Term"></a>Show Full Path in Term</h2><p>Edit <code>/etc/profile</code> add:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> PS1=<span class="string">'[\u@\h `pwd`]\$'</span></div></pre></td></tr></table></figure></p><p><code>$&gt; source /etc/profile</code></p><h2 id="Install-JDK8"><a href="#Install-JDK8" class="headerlink" title="Install JDK8"></a>Install JDK8</h2><ol><li>Install from <code>tar.gz</code> package.</li><li>Decompress the package.</li><li><p>Edit <code>/etc/profile</code> file add <code>PATH</code></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> JAVA_HOME=/path/to/jdk</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</div></pre></td></tr></table></figure></li><li><p>Test</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$&gt; <span class="built_in">source</span> /etc/profile</div><div class="line">$&gt; java -version</div></pre></td></tr></table></figure></li></ol><h2 id="Install-Hadoop2-7"><a href="#Install-Hadoop2-7" class="headerlink" title="Install Hadoop2.7"></a>Install Hadoop2.7</h2><ol><li>Download <code>tar.gz</code> package.</li><li>Decompress the package.</li><li><p>Edit <code>/etc/profile</code> file add <code>PATH</code></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> HADOOP_HOME=/path/to/jdk</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/sbin</div></pre></td></tr></table></figure></li><li><p>Test</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$&gt; <span class="built_in">source</span> /etc/profile</div><div class="line">$&gt; hadoop version</div><div class="line">$&gt; hdfs dfs -ls \</div></pre></td></tr></table></figure></li></ol><h2 id="Hadoop-Configuration"><a href="#Hadoop-Configuration" class="headerlink" title="Hadoop Configuration"></a>Hadoop Configuration</h2><ol><li>Standalone(local) mode</li><li><p>Pseudoditributed mode</p><ul><li><code>cd</code> into <code>${HADOOP_HOME}/etc/hadoop</code></li><li><p>edit files</p><ol><li><p>edit <code>core-site.xml</code></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt;</div><div class="line">&lt;configuration&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;fs.defaultFS&lt;/name&gt;</div><div class="line">        &lt;value&gt;hdfs://localhost/&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></li><li><p>edit <code>hdfs-site.xml</code></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt;</div><div class="line">&lt;configuration&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;dfs.replication&lt;/name&gt;</div><div class="line">        &lt;value&gt;1&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></li><li><p>edit <code>mapred-site.xml</code><br> <code>$&gt; cp mapred-site.xml.template mapred-site.xml</code></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt;</div><div class="line">&lt;configuration&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</div><div class="line">        &lt;value&gt;yarn&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></li><li><p>edit <code>yarn-site.xml</code></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt;</div><div class="line">&lt;configuration&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</div><div class="line">        &lt;value&gt;localhost&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</div><div class="line">        &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></li><li><p>SSH</p><ul><li><p>Three packages</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">openssh         ---&gt;  ssh-keygen</div><div class="line">openssh-client  ---&gt;  ssh</div><div class="line">openssh-server  ---&gt;  sshd</div></pre></td></tr></table></figure></li><li><p>Check ssh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$&gt; yum list installed ssh  // check `openssh` `openssh-server` `openssh-client`</div><div class="line">$&gt; ps -Af | grep sshd      // check <span class="keyword">if</span> has sshd process</div></pre></td></tr></table></figure></li><li><p>Generate ssh keys in client</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$&gt; ssh-keygen -t rsa -P <span class="string">''</span> -f ~/.ssh/id_rsa</div></pre></td></tr></table></figure><p><code>~/.ssh/id_rsa/id_rsa</code> is private key and <code>~/.ssh/id_rsa/id_rsa.pub</code> is public key.</p></li><li>Append public key to <code>~/.ssh/authorized_keys</code> in server<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$&gt; cat id_rsa.pub &gt;&gt; authorized_keys</div><div class="line">$&gt; chmod 644 authorized_keys  // turn off write permission of group and others</div></pre></td></tr></table></figure></li></ul></li></ol></li></ul></li><li><p>Full Distributed</p></li><li><p>Config by link file</p><ul><li><p>Create 3 config folders as <code>${HADOOP_HOME}/etc/hadoop</code>:</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$&#123;HADOOP_HOME&#125;</span>/etc/<span class="built_in">local</span></div><div class="line"><span class="variable">$&#123;HADOOP_HOME&#125;</span>/etc/pesudo</div><div class="line"><span class="variable">$&#123;HADOOP_HOME&#125;</span>/etc/full</div></pre></td></tr></table></figure></li><li><p>Make symbolic link to needed<br>  <code>$&gt; link -s pesudo hadoop   // switch to pesudo mode</code></p></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Start to introduce Hadoop.&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="BigData" scheme="https://nannanmath.github.io/categories/BigData/"/>
    
    
      <category term="hadoop" scheme="https://nannanmath.github.io/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>How to install CentOS Linux on VMware 12</title>
    <link href="https://nannanmath.github.io/2017/10/03/vmware-centos/"/>
    <id>https://nannanmath.github.io/2017/10/03/vmware-centos/</id>
    <published>2017-10-03T10:30:30.000Z</published>
    <updated>2017-10-12T08:04:27.684Z</updated>
    
    <content type="html"><![CDATA[<p>This post will introduce how to install a CentOS on VMware 12.</p><a id="more"></a><h2 id="Install-CentOS"><a href="#Install-CentOS" class="headerlink" title="Install CentOS"></a>Install CentOS</h2><p>Custom –&gt; I will install the operating system later.</p><h2 id="Good-Commands"><a href="#Good-Commands" class="headerlink" title="Good Commands"></a>Good Commands</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">$&gt; more a.txt        // more display</div><div class="line">$&gt; more -5 a.txt     // display the first 5 lines</div><div class="line"></div><div class="line">$&gt; ls -aR ~          // list all recursively</div><div class="line"></div><div class="line">$&gt; head a.txt        // display the first 10 lines</div><div class="line">$&gt; head -n 12 a.txt  // display the first 12 lines</div><div class="line">$&gt; head -n -10 a.txt  // display all but the last 10 lines</div><div class="line"></div><div class="line">$&gt; tail a.txt        // display the last 10 lines</div><div class="line">$&gt; tail -n 12 a.txt  // the last 12 lines</div><div class="line"></div><div class="line">$&gt; wc -c a.txt       // display the byte counts</div><div class="line">$&gt; wc -m a.txt       // <span class="built_in">print</span> the char counts</div><div class="line">$&gt; wc -l a.txt       // <span class="built_in">print</span> the line counts</div><div class="line">$&gt; wc -w a.txt       // display the word counts</div><div class="line">$&gt; wc -L a.txt       // <span class="built_in">print</span> the length of the longest line</div><div class="line"></div><div class="line">$&gt; hostname</div><div class="line">$&gt; uname -a          // <span class="built_in">print</span> all information about system</div><div class="line"></div><div class="line">$&gt; file a.so         // <span class="built_in">print</span> <span class="built_in">type</span> of a file</div><div class="line"></div><div class="line">$&gt; xargs             // convert multi lines to single line</div><div class="line">$&gt; find . | grep txt | cp `xargs` temp    // copy all <span class="string">'txt'</span> files from `find` <span class="built_in">command</span> to `temp` directory</div><div class="line"></div><div class="line">$&gt; <span class="built_in">which</span> <span class="built_in">echo</span>        // find <span class="built_in">where</span> <span class="built_in">command</span> `<span class="built_in">echo</span>` is</div><div class="line"></div><div class="line">$&gt; chmod g+w a.txt   // add write permission to group</div><div class="line"></div><div class="line">$&gt; chown -h xxx:xxx linker  // change a linker owner but not object</div><div class="line">$&gt; ln -sfT linker newObject  // change a linker from old to new</div></pre></td></tr></table></figure><h2 id="Net-Configuration"><a href="#Net-Configuration" class="headerlink" title="Net Configuration"></a>Net Configuration</h2><ol><li><p>Network modes</p><ul><li>Bridged <ul><li>Connect virtual machine to Internet directly by physical netcard.  </li><li>Other machines can access virtual machine directly.</li></ul></li><li>NAT(Net Address Tranform)<ul><li>virtual machine can access other machines.  </li><li>Other machines can not access virtual machine.</li></ul></li><li>Host-only<ul><li>Like NAT but can not connect to Internet.</li></ul></li></ul></li><li><p>Static IP Address</p><ul><li><p>Edit file: <code>/etc/sysconfig/network-scripts/ifcfg-enoxxxxx</code><br>  These values should be modified:</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ONBOOT=yes</div><div class="line">NM_CONTROLLED=no</div><div class="line">BOOTPROTO=static</div><div class="line">IPADDR=xxx.xxx.xxx.xxx</div><div class="line">NETMASK=xxx.xxx.xxx.xxx</div><div class="line">GATEWAY=xxx.xxx.xxx.xxx</div></pre></td></tr></table></figure><p>  <code>NETMASK</code> and <code>GATEWAY</code> must be same with your VMnet8(NAT mode).</p></li><li><p>Edit file: <code>/etc/resolv.conf</code> for DNS</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nameserver xxx.xxx.xxx.xxx</div></pre></td></tr></table></figure><p>  <code>nameserver</code> must be same with VMnet8 gateway.</p></li></ul></li><li><p>Jobs</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$&gt; cat a.txt &amp;  // run <span class="keyword">in</span> background</div><div class="line">$&gt; <span class="built_in">jobs</span>         // check <span class="built_in">jobs</span> <span class="keyword">in</span> background</div><div class="line">$&gt; <span class="built_in">fg</span> %n        // switch job to foreground, `n` is job ID</div><div class="line">ctrl + z        // switch job to background</div><div class="line">$&gt; <span class="built_in">bg</span> %n        // <span class="built_in">continue</span> a job <span class="keyword">in</span> background</div><div class="line">$&gt; <span class="built_in">kill</span> %n      // <span class="built_in">kill</span> a job</div></pre></td></tr></table></figure></li><li><p>Process</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$&gt; ps -Af      // show all processes</div><div class="line">$&gt; top</div></pre></td></tr></table></figure></li><li><p>Cut</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$&gt; cut -c 1-5 a.txt   // show the 1st - 5th chars <span class="keyword">in</span> each lines</div></pre></td></tr></table></figure></li><li><p>Device Info</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$&gt; fdisk -l /dev/sda  // show infos of `sda` like partitions</div><div class="line">$&gt; df -ah             // show free space of devices</div></pre></td></tr></table></figure></li><li><p>Host name</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$&gt; hostname // show host name</div></pre></td></tr></table></figure><p> change host name to edit <code>/etc/hostname</code> file.</p></li><li><p>Host name to IP address<br> Edit file <code>/etc/hosts</code></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127.0.0.1 localhost</div><div class="line">xxx.xxx.xxx.xxx host1</div></pre></td></tr></table></figure></li><li><p>Nested Commands</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$&gt; <span class="built_in">echo</span> www.baidu.com &gt; a.txt</div><div class="line">$&gt; <span class="built_in">echo</span> `cat a.txt`</div><div class="line">$&gt; ping $(<span class="built_in">echo</span> $(cat a.txt))</div></pre></td></tr></table></figure></li><li><p>Add and Delete users</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$&gt; useradd -m newuser      // add new user</div><div class="line">$&gt; userdel -rf newuser     // delete new user</div></pre></td></tr></table></figure></li><li><p>Env variable</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$&gt; <span class="built_in">echo</span> <span class="variable">$&#123;PATH&#125;</span></div><div class="line">$&gt; <span class="built_in">echo</span> <span class="string">"<span class="variable">$PATH</span>"</span></div><div class="line">$&gt; <span class="built_in">export</span> mypath=<span class="variable">$&#123;name:-$PATH&#125;</span>  // ternary operator</div></pre></td></tr></table></figure></li><li><p>Parameters of scripts</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$?        // <span class="built_in">return</span> value</div><div class="line"><span class="variable">$#</span>        // number of params</div><div class="line"><span class="variable">$n</span>        // the n-th param</div><div class="line"><span class="variable">$0</span>        // current name of script</div><div class="line"><span class="variable">$@</span>        // get all params</div><div class="line"><span class="built_in">shift</span>     // left move param</div></pre></td></tr></table></figure></li><li><p>If<br>An example of <code>if</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -lt 2 ]; <span class="keyword">then</span></div><div class="line">  <span class="built_in">echo</span> less than 2!</div><div class="line"><span class="keyword">elif</span> [ <span class="variable">$#</span> -gt 2 ]; <span class="keyword">then</span></div><div class="line">  <span class="built_in">echo</span> greater <span class="keyword">then</span> 2!</div><div class="line"><span class="keyword">else</span></div><div class="line">  <span class="built_in">echo</span> good!</div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="built_in">echo</span> ==============</div><div class="line"><span class="built_in">echo</span> param number is: <span class="variable">$#</span></div><div class="line"><span class="built_in">echo</span> all params are: <span class="variable">$@</span></div><div class="line"><span class="built_in">echo</span> the 2nd param is: <span class="variable">$2</span></div><div class="line"><span class="built_in">echo</span> current script name is: <span class="variable">$0</span></div></pre></td></tr></table></figure></li><li><p>For<br>An example of <code>for</code>“</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">lines=5</div><div class="line"><span class="keyword">for</span> (( x=1; x&lt;=lines; x=<span class="variable">$x</span>+1 )); <span class="keyword">do</span></div><div class="line">  <span class="keyword">for</span> (( y=1; y&lt;=<span class="variable">$x</span>; y=<span class="variable">$y</span>+1 )); <span class="keyword">do</span></div><div class="line">    <span class="built_in">echo</span> -n <span class="variable">$ye</span></div><div class="line">  <span class="keyword">done</span></div><div class="line">  <span class="built_in">echo</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure></li><li><p>YUM</p><ul><li><p>Repository</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$&gt; mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</div><div class="line">$&gt; curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo</div><div class="line">$&gt; yum makecache</div></pre></td></tr></table></figure></li><li><p>Yum Commands</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$&gt; yum list                  // list all packages</div><div class="line">$&gt; yum list installed        // list all installed packages</div><div class="line">$&gt; yum search xxx            // search xxx <span class="keyword">in</span> repos</div><div class="line">$&gt; yum remove xxx            // remove an installed package xxx</div><div class="line">$&gt; yum install xxx           // install a package</div><div class="line">$&gt; yum [re]install --downloadonly --downloaddir=/home/xxx wget // download wget packages into /home/xxx</div><div class="line">$&gt; yum localinstall xxx.rpm  // <span class="built_in">local</span> install a rpm</div></pre></td></tr></table></figure></li><li><p>Make ISO file</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$&gt; yum install mkisofs</div><div class="line">$&gt; mkisofs -r -o xxx.iso yyy    // make xxx.iso from dir yyy</div></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This post will introduce how to install a CentOS on VMware 12.&lt;/p&gt;
    
    </summary>
    
      <category term="BigData" scheme="https://nannanmath.github.io/categories/BigData/"/>
    
    
      <category term="Environment" scheme="https://nannanmath.github.io/tags/Environment/"/>
    
  </entry>
  
  <entry>
    <title>function wrap</title>
    <link href="https://nannanmath.github.io/2017/06/22/function-wrap/"/>
    <id>https://nannanmath.github.io/2017/06/22/function-wrap/</id>
    <published>2017-06-22T06:24:15.000Z</published>
    <updated>2017-10-09T04:21:06.316Z</updated>
    
    <content type="html"><![CDATA[<p>This post will introduce a C++ 11 feature, <code>std::function</code>. It can wrap any kind of <em>callable element</em> into a copyable object and whose type depands soly on its call signature.  </p><a id="more"></a><p><code>std::function</code> is an object who can replace the function poiner in C language but more safety. It is useful for implement of many C++ design patterns.</p><figure class="highlight c"><figcaption><span>std::function</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>,<span class="keyword">int</span>)&gt; IntOpFun;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Adder</span> &#123;</span></div><div class="line">  <span class="function"><span class="keyword">int</span> <span class="title">OnAB</span><span class="params">(<span class="keyword">int</span> iA, <span class="keyword">int</span> iB)</span> </span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Add(%d,%d)=%d"</span>, iA, iB, iA + iB);</div><div class="line">    <span class="keyword">return</span> iA + iB;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Muler</span> &#123;</span></div><div class="line">  <span class="function"><span class="keyword">int</span> <span class="title">OnAB</span><span class="params">(<span class="keyword">int</span> iA, <span class="keyword">int</span> iB)</span> </span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Mul3(%d,%d)=%d"</span>, iA, iB, iA * iB);</div><div class="line">    <span class="keyword">return</span> iA * iB;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Subject</span> &#123;</span></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">AddObserver</span><span class="params">(IntOpFun of)</span> </span>&#123;</div><div class="line">    m_vecOf.push_back(of);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Notify</span><span class="params">(<span class="keyword">int</span> iA, <span class="keyword">int</span> iB)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> iter = m_vecOf.begin(); iter != m_vecOf.end(); ++iter) &#123;</div><div class="line">      (*iter)(iA, iB);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;IntOpFun&gt; m_vecOf;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  Subject3 subj;</div><div class="line">  Adder3 adder;</div><div class="line">  Muler3 muler;</div><div class="line">  subj.AddObserver(<span class="built_in">std</span>::bind(&amp;Adder3::OnAB, &amp;adder, <span class="built_in">std</span>::placeholders::_1, <span class="built_in">std</span>::placeholders::_2));</div><div class="line">  subj.AddObserver(<span class="built_in">std</span>::bind(&amp;Muler3::OnAB, &amp;muler, <span class="built_in">std</span>::placeholders::_1, <span class="built_in">std</span>::placeholders::_2));</div><div class="line">  subj.Notify(<span class="number">1</span>, <span class="number">2</span>);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This post will introduce a C++ 11 feature, &lt;code&gt;std::function&lt;/code&gt;. It can wrap any kind of &lt;em&gt;callable element&lt;/em&gt; into a copyable object and whose type depands soly on its call signature.  &lt;/p&gt;
    
    </summary>
    
      <category term="Program" scheme="https://nannanmath.github.io/categories/Program/"/>
    
    
      <category term="c++" scheme="https://nannanmath.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>operator overloading</title>
    <link href="https://nannanmath.github.io/2017/06/21/operator-overloading/"/>
    <id>https://nannanmath.github.io/2017/06/21/operator-overloading/</id>
    <published>2017-06-21T08:16:10.000Z</published>
    <updated>2017-10-09T04:21:06.326Z</updated>
    
    <content type="html"><![CDATA[<p>This post will introduce how to overload different operators in C++ language. </p><a id="more"></a><h2 id="Some-important-operators"><a href="#Some-important-operators" class="headerlink" title="Some important operators"></a>Some important operators</h2><ul><li>input and output operators: <code>&lt;&lt;</code>, <code>&gt;&gt;</code>.</li><li>assignment operator: <code>=</code>.</li><li>subscript operator: <code>[]</code>.</li><li>pre- and post- increament operator: <code>++</code>, <code>--</code>.</li><li>call operator: <code>()</code>.</li></ul><figure class="highlight c"><figcaption><span>simple operators overloading</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span>  <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CA</span> &#123;</span></div><div class="line"> <span class="keyword">public</span>:</div><div class="line">  <span class="comment">// constructor and distructor.</span></div><div class="line">  CA(): count(<span class="number">0</span>), book(<span class="string">""</span>) &#123;&#125;</div><div class="line">  CA(<span class="keyword">int</span> cnt): count(cnt),book(<span class="string">""</span>) &#123;&#125;</div><div class="line">  CA(<span class="built_in">string</span> str);</div><div class="line">  ~CA() &#123;&#125;;</div><div class="line">  </div><div class="line">  <span class="comment">// copy constructor</span></div><div class="line">  CA(<span class="keyword">const</span> CA&amp; C);</div><div class="line">  </div><div class="line">  <span class="comment">// IO '&lt;&lt;' and '&gt;&gt;' overloading.</span></div><div class="line">  <span class="comment">// They should be friend function and not belong to this class.</span></div><div class="line">  <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;( ostream&amp; os, <span class="keyword">const</span> CA&amp; C);</div><div class="line">  <span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;( istream&amp; in, CA&amp; C);</div><div class="line">  </div><div class="line">  <span class="comment">// Logical operators '==', '!=' overloading.</span></div><div class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> CA&amp; C);</div><div class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span> != (<span class="keyword">const</span> CA&amp; C);</div><div class="line">  </div><div class="line">  <span class="comment">// Subscript operator '[]'</span></div><div class="line">  <span class="built_in">string</span>&amp; <span class="keyword">operator</span> [] (<span class="keyword">const</span> <span class="keyword">size_t</span> index);</div><div class="line">  <span class="keyword">const</span> <span class="built_in">string</span>&amp; <span class="keyword">operator</span> [] (<span class="keyword">const</span> <span class="keyword">size_t</span> index) <span class="keyword">const</span>; </div><div class="line">  </div><div class="line">  <span class="comment">// Pre-increment operators.</span></div><div class="line">  CA&amp; <span class="keyword">operator</span> ++ ();</div><div class="line">  CA&amp; <span class="keyword">operator</span> -- ();</div><div class="line">  </div><div class="line">  <span class="comment">// Post-increment operators.</span></div><div class="line">  CA <span class="keyword">operator</span> ++ (<span class="keyword">int</span>);</div><div class="line">  CA <span class="keyword">operator</span> -- (<span class="keyword">int</span>);</div><div class="line">  </div><div class="line">  <span class="comment">// Call operator.</span></div><div class="line">  <span class="function"><span class="keyword">int</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; books)</span></span>;</div><div class="line">  </div><div class="line"> <span class="keyword">private</span>:</div><div class="line">  <span class="keyword">int</span> count; <span class="comment">// number of books in bks.</span></div><div class="line">  <span class="built_in">string</span> book; <span class="comment">// the last books in bks.</span></div><div class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; bks; <span class="comment">// container of books.</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">CA::CA(<span class="built_in">string</span> str) &#123;</div><div class="line">  <span class="keyword">this</span>-&gt;count = <span class="number">1</span>;</div><div class="line">  <span class="keyword">this</span>-&gt;book = str;</div><div class="line">  <span class="keyword">this</span>-&gt;bks.push_back(str);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// copy constructor</span></div><div class="line">CA::CA(<span class="keyword">const</span> CA&amp; C) &#123;</div><div class="line">  <span class="keyword">this</span>-&gt;count = C.count;</div><div class="line">  <span class="keyword">this</span>-&gt;book = C.book;</div><div class="line">  <span class="keyword">this</span>-&gt;bks = C.bks;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// '&lt;&lt;' operator overloading.</span></div><div class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;( ostream&amp; os, <span class="keyword">const</span> CA&amp; C) &#123;</div><div class="line">  os &lt;&lt; C.count &lt;&lt; <span class="string">", last="</span>&lt;&lt;C.book &lt;&lt; <span class="string">" , books = "</span>; </div><div class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; books(C.bks);</div><div class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::iterator iter;</div><div class="line">  <span class="keyword">for</span>(iter=books.begin(); iter != books.end(); ++iter)</div><div class="line">    os &lt;&lt; *iter &lt;&lt; <span class="string">", "</span> ;</div><div class="line">  os &lt;&lt; <span class="string">"\n"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// '&gt;&gt;' operator overloading.</span></div><div class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt;( istream&amp; in, CA&amp; C) &#123;</div><div class="line">  in &gt;&gt; C.book;</div><div class="line">  <span class="keyword">if</span>(in) &#123; <span class="comment">// check if in is valid.</span></div><div class="line">    C.bks.push_back(C.book);</div><div class="line">    ++C.count;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"---- input over ! -----"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> in;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// '==' operator.</span></div><div class="line"><span class="keyword">bool</span> CA::<span class="keyword">operator</span> == (<span class="keyword">const</span> CA&amp; C) &#123;</div><div class="line">  <span class="keyword">if</span>((<span class="keyword">this</span>-&gt;count == C.count) &amp;&amp; (<span class="keyword">this</span>-&gt;book == C.book))</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">bool</span> CA::<span class="keyword">operator</span> != (<span class="keyword">const</span> CA&amp; C) &#123;</div><div class="line">  <span class="keyword">if</span>(*<span class="keyword">this</span> == C)</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  <span class="keyword">else</span></div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// '[]' operator.</span></div><div class="line"><span class="built_in">string</span>&amp; CA::<span class="keyword">operator</span> [] (<span class="keyword">const</span> <span class="keyword">size_t</span> index) &#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>-&gt;bks[index];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// pre-increment</span></div><div class="line"><span class="comment">// return the reference of this object.</span></div><div class="line">CA&amp; CA::<span class="keyword">operator</span> ++ () &#123;</div><div class="line">  ++<span class="keyword">this</span>-&gt;count;</div><div class="line">  <span class="keyword">this</span>-&gt;book = <span class="string">"-no-"</span>;</div><div class="line">  <span class="keyword">this</span>-&gt;bks.push_back(<span class="built_in">string</span>(<span class="string">"-no-"</span>));</div><div class="line">  <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// post-increment</span></div><div class="line"><span class="comment">// return a new object constructed from this object.</span></div><div class="line">CA CA::<span class="keyword">operator</span> ++ (<span class="keyword">int</span>) &#123;</div><div class="line">  <span class="function">CA <span class="title">B</span><span class="params">(*<span class="keyword">this</span>)</span></span>;</div><div class="line">  ++<span class="keyword">this</span>-&gt;count;</div><div class="line">  <span class="keyword">this</span>-&gt;book = <span class="string">"-no-"</span>;</div><div class="line">  <span class="keyword">this</span>-&gt;bks.push_back(<span class="built_in">string</span>(<span class="string">"-no-"</span>));</div><div class="line">  <span class="keyword">return</span> B;</div><div class="line">&#125;</div><div class="line">CA&amp; CA::<span class="keyword">operator</span> -- () &#123;</div><div class="line">  --<span class="keyword">this</span>-&gt;count;</div><div class="line">  <span class="keyword">this</span>-&gt;bks.pop_back();</div><div class="line">  <span class="keyword">size_t</span> i = <span class="keyword">this</span>-&gt;bks.end() - <span class="keyword">this</span>-&gt;bks.begin();</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">" i= "</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="keyword">this</span>-&gt;book = (*<span class="keyword">this</span>)[i<span class="number">-1</span>];</div><div class="line">  <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line">CA CA::<span class="keyword">operator</span> -- (<span class="keyword">int</span>) &#123;</div><div class="line">  <span class="function">CA <span class="title">B</span><span class="params">(*<span class="keyword">this</span>)</span></span>;</div><div class="line">  --<span class="keyword">this</span>-&gt;count;</div><div class="line">  <span class="keyword">this</span>-&gt;bks.pop_back();</div><div class="line">  <span class="keyword">size_t</span> i = <span class="keyword">this</span>-&gt;bks.end() - <span class="keyword">this</span>-&gt;bks.begin();</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">" i= "</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="keyword">this</span>-&gt;book = (*<span class="keyword">this</span>)[i<span class="number">-1</span>];</div><div class="line">  <span class="keyword">return</span> B;</div><div class="line">&#125;</div><div class="line"><span class="comment">// call operator</span></div><div class="line"><span class="keyword">int</span> CA::<span class="keyword">operator</span> () (<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; books) &#123;</div><div class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::iterator iter = books.begin();</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (; iter != books.end(); ++iter) &#123;</div><div class="line">    <span class="keyword">this</span>-&gt;count++;</div><div class="line">    <span class="keyword">this</span>-&gt;bks.push_back(*iter);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">if</span> (iter != books.begin())</div><div class="line">    <span class="keyword">this</span>-&gt;book = *(--iter);</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>-&gt;count;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Dereference-operator"><a href="#Dereference-operator" class="headerlink" title="Dereference operator"></a>Dereference operator</h2><ul><li>Arrow operator <code>-&gt;</code>:<ul><li>Example: <code>a-&gt;b</code>.</li><li>If <code>a</code> is a pointer pointing to an object has member <code>b</code>, then return <code>b</code>.</li><li>If <code>a</code> is an object that has overloaded <code>-&gt;</code> operator, then call <code>operator -&gt;()</code>. When this return a pointer then run as above.</li></ul></li></ul><figure class="highlight c"><figcaption><span>arrow operator</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;  </span></span></div><div class="line">  </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></div><div class="line"> <span class="keyword">public</span>:</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Printf</span><span class="params">()</span> </span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"I am A "</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></div><div class="line"> <span class="keyword">public</span>:</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Printf</span><span class="params">()</span> </span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"I am B "</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</div><div class="line">  A* <span class="keyword">operator</span>-&gt;() &#123; <span class="keyword">return</span> &amp;m_A;&#125;</div><div class="line"> <span class="keyword">private</span>:</div><div class="line">  A m_A;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> &#123;</span></div><div class="line"> <span class="keyword">public</span>:</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Printf</span><span class="params">()</span> </span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"I am C "</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</div><div class="line">  B* <span class="keyword">operator</span>-&gt;() &#123; <span class="keyword">return</span> &amp;m_B; &#125;</div><div class="line"> <span class="keyword">private</span>:</div><div class="line">  B m_B;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span> &#123;</span></div><div class="line"> <span class="keyword">public</span>:</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Printf</span><span class="params">()</span> </span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"I am E "</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</div><div class="line">  B&amp; <span class="keyword">operator</span>-&gt;() &#123; <span class="keyword">return</span> m_B; &#125; </div><div class="line"> <span class="keyword">private</span>:</div><div class="line">  B m_B;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  D d;</div><div class="line">  d-&gt;Printf();                <span class="comment">//  I am B (d-&gt;() return pointer to B).</span></div><div class="line">  d.<span class="keyword">operator</span>-&gt;()-&gt;Printf();   <span class="comment">//  I am B (d.operator-&gt;() return pointer to B).</span></div><div class="line">  d-&gt;<span class="keyword">operator</span>-&gt;()-&gt;Printf();  <span class="comment">//  I am A (d-&gt;() return pointer to B, d-&gt;operator-&gt;() return pointer to A,</span></div><div class="line">                              <span class="comment">//  d-&gt;operator-&gt;()-&gt;Printf() return Printf() of A).</span></div><div class="line">  E e;</div><div class="line">  e-&gt;Printf();                <span class="comment">//  I am A (e-&gt;() return ref of B, B-&gt;() return pointer to A, </span></div><div class="line">                              <span class="comment">//  e-&gt;Printf() return Printf() of A).</span></div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>Derecerence operator: <code>*</code></li></ul><figure class="highlight c"><figcaption><span>deref operator</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;  </span></span></div><div class="line">  </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CA</span>;</span></div><div class="line"> </div><div class="line"> <span class="comment">// smart pointer</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C_Ptr</span> &#123;</span></div><div class="line">  C_Ptr(<span class="keyword">int</span> *p): ip(p), use(<span class="number">1</span>) &#123; <span class="built_in">cout</span>&lt;&lt; <span class="string">" init: use = "</span> &lt;&lt; use &lt;&lt; <span class="string">", *ip="</span> &lt;&lt; *ip&lt;&lt;<span class="built_in">endl</span>;&#125;</div><div class="line">  ~C_Ptr() &#123;&#125;</div><div class="line">  <span class="keyword">int</span> *ip;  <span class="comment">// pointer</span></div><div class="line">  <span class="keyword">int</span> use;  <span class="comment">// counter </span></div><div class="line"> </div><div class="line">  <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">CA</span>;</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CA</span> &#123;</span></div><div class="line"> <span class="keyword">public</span>:</div><div class="line">  CA(<span class="keyword">int</span>*p, <span class="keyword">int</span> v): ptr(<span class="keyword">new</span> C_Ptr(p)), val(v) &#123;&#125;</div><div class="line">  </div><div class="line">  ~CA() &#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"~CA(): use = "</span> &lt;&lt; ptr-&gt;use &lt;&lt; <span class="built_in">endl</span>; </div><div class="line">    <span class="keyword">if</span>(--ptr-&gt;use == <span class="number">0</span>) &#123;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"free C_Ptr"</span> &lt;&lt;<span class="built_in">endl</span>;</div><div class="line">      <span class="keyword">delete</span> ptr;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">int</span>&amp; <span class="keyword">operator</span>*() &#123; <span class="keyword">return</span> *ptr-&gt;ip;&#125; <span class="comment">// deref operator</span></div><div class="line"> <span class="keyword">private</span>:</div><div class="line">  C_Ptr *ptr;</div><div class="line">  <span class="keyword">int</span> val;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This post will introduce how to overload different operators in C++ language. &lt;/p&gt;
    
    </summary>
    
      <category term="Program" scheme="https://nannanmath.github.io/categories/Program/"/>
    
    
      <category term="c++" scheme="https://nannanmath.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>IO redirction</title>
    <link href="https://nannanmath.github.io/2017/06/19/IO-redirction/"/>
    <id>https://nannanmath.github.io/2017/06/19/IO-redirction/</id>
    <published>2017-06-19T03:47:15.000Z</published>
    <updated>2017-10-09T04:21:06.309Z</updated>
    
    <content type="html"><![CDATA[<p>In some cases, programmer wants to redirect input or output as a file for debugging facility. This post will introduce how to redirect input and output in C and C++ program. </p><a id="more"></a><h2 id="C-Language"><a href="#C-Language" class="headerlink" title="C Language"></a>C Language</h2><p>In C language, usually, <code>scanf</code> and <code>printf</code> are used for programming input and output in terminal respectively. To redirect them to a file, <code>freopen()</code> is a method.</p><figure class="highlight c"><figcaption><span>freopen</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">freopen(<span class="string">"data.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line">freopen(<span class="string">"data.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</div></pre></td></tr></table></figure><p>The code redirects standard input to <code>data.in</code> and output to <code>data.out</code>.</p><h2 id="C-Language-1"><a href="#C-Language-1" class="headerlink" title="C++ Language"></a>C++ Language</h2><p>In C++, <code>iostream</code> is commonly used for input and output, like <code>std::cin</code> and <code>std::cout</code>. For redirction, <code>rdbuf()</code> can assign them to a file.</p><figure class="highlight c"><figcaption><span>freopen</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">streambuf *cinbackup;</div><div class="line">streambuf *coutbackup;</div><div class="line">cinbackup = <span class="built_in">cin</span>.rdbuf();   <span class="comment">// back up cin's streambuf  </span></div><div class="line">coutbackup = <span class="built_in">cout</span>.rdbuf();   <span class="comment">// back up cout's streambuf  </span></div><div class="line"></div><div class="line">ifstream fin;</div><div class="line">ofstream fout;  </div><div class="line">fin.open(<span class="string">"data.in"</span>);</div><div class="line">fout.open(<span class="string">"data.out"</span>);  </div><div class="line"><span class="built_in">cin</span>.rdbuf(fin.rdbuf()); <span class="comment">// assign file's streambuf to cin  </span></div><div class="line"><span class="built_in">cout</span>.rdbuf(fout.rdbuf()); <span class="comment">// assign file's streambuf to cout  </span></div><div class="line"></div><div class="line"><span class="built_in">cin</span>.rdbuf(cinbackup);     <span class="comment">// restore cin's original streambuf</span></div><div class="line"><span class="built_in">cout</span>.rdbuf(coutbackup);</div></pre></td></tr></table></figure><p>The code above assign <code>iostream</code> to <code>data.in</code> and <code>data.out</code>.Then, it restores them to original streambuf.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In some cases, programmer wants to redirect input or output as a file for debugging facility. This post will introduce how to redirect input and output in C and C++ program. &lt;/p&gt;
    
    </summary>
    
      <category term="Program" scheme="https://nannanmath.github.io/categories/Program/"/>
    
    
      <category term="c++" scheme="https://nannanmath.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>smart pointer</title>
    <link href="https://nannanmath.github.io/2017/06/16/smart-pointer/"/>
    <id>https://nannanmath.github.io/2017/06/16/smart-pointer/</id>
    <published>2017-06-16T05:03:02.000Z</published>
    <updated>2017-10-09T04:21:06.328Z</updated>
    
    <content type="html"><![CDATA[<p>This post will introduce two types of smart pointers, which can help programmers to manage objects allocated in heap. </p><a id="more"></a><h2 id="unique-ptr"><a href="#unique-ptr" class="headerlink" title="unique_ptr"></a>unique_ptr</h2><p><code>unique_ptr</code> can manage another object through a pointer and dispose of that object when the <code>unique_ptr</code> goes out of scope. <code>unique_ptr</code> ensure that there is only one smart pointer points to the object.</p><p>The object is disposed of using the assiciated deleter when either fo the following happens:</p><ul><li>the managing <code>unique_ptr</code> object is destoryed</li><li><code>unique_ptr</code> object is assigned to another pointer via <code>operator=</code> or <code>reset()</code></li></ul><p>The object can be disposed of using a user-supplied deleter by calling <code>get_delter()(ptr)</code>.</p><p><code>unique_ptr</code> can manage a single object or a dynamically-allocated array of objects(allocated by new[]). For the latter, when the object is disposed, <code>unique_ptr</code> will call <code>delete[]</code> to distory the array of objects defautly.</p><figure class="highlight c"><figcaption><span>unique_ptr</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span> &#123;</span></div><div class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"B::bar\n"</span>; &#125;</div><div class="line">  <span class="keyword">virtual</span> ~B() = <span class="keyword">default</span>;</div><div class="line">&#125;;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">D</span> :</span> B &#123;</div><div class="line">  D() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"D::D\n"</span>;  &#125;</div><div class="line">  ~D() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"D::~D\n"</span>;  &#125;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span> override </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"D::bar\n"</span>;  &#125;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="comment">// a function consuming a unique_ptr can take it by value or by rvalue reference</span></div><div class="line"><span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;D&gt; pass_through(<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;D&gt; p) &#123;</div><div class="line">  p-&gt;bar();</div><div class="line">  <span class="keyword">return</span> p;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="comment">// unique ownership semantics</span></div><div class="line">  &#123;</div><div class="line">    <span class="keyword">auto</span> p = <span class="built_in">std</span>::make_unique&lt;D&gt;(); <span class="comment">// p is a unique_ptr that owns a D</span></div><div class="line">    <span class="keyword">auto</span> q = pass_through(<span class="built_in">std</span>::move(p)); </div><div class="line">    assert(!p); <span class="comment">// now p owns nothing and holds a null pointer</span></div><div class="line">    q-&gt;bar();   <span class="comment">// and q owns the D object</span></div><div class="line">  &#125; <span class="comment">// ~D called here</span></div><div class="line"> </div><div class="line">  <span class="comment">// Runtime polymorphism demo</span></div><div class="line">  &#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;B&gt; p = <span class="built_in">std</span>::make_unique&lt;D&gt;(); <span class="comment">// p is a unique_ptr that owns a D</span></div><div class="line">                                                  <span class="comment">// as a pointer to base</span></div><div class="line">    p-&gt;bar(); <span class="comment">// virtual dispatch</span></div><div class="line"> </div><div class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;B&gt;&gt; v;  <span class="comment">// unique_ptr can be stored in a container</span></div><div class="line">    v.push_back(<span class="built_in">std</span>::make_unique&lt;D&gt;());</div><div class="line">    v.push_back(<span class="built_in">std</span>::move(p)); <span class="comment">// notice: v.push_back(p) causes compiler errors</span></div><div class="line">    v.emplace_back(<span class="keyword">new</span> D);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; p: v) p-&gt;bar(); <span class="comment">// virtual dispatch</span></div><div class="line">  &#125; <span class="comment">// ~D called 3 times</span></div><div class="line"> </div><div class="line">  <span class="comment">// Custom lambda-expression deleter</span></div><div class="line">  &#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;D, <span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(D*)&gt;&gt; p(<span class="keyword">new</span> D, [](D* ptr)&#123;</div><div class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"destroying from a custom deleter...\n"</span>;</div><div class="line">      <span class="keyword">delete</span> ptr;</div><div class="line">    &#125;);  <span class="comment">// p owns D</span></div><div class="line">    p-&gt;bar();</div><div class="line">  &#125; <span class="comment">// the lambda above is called and D is destroyed</span></div><div class="line"> </div><div class="line">  <span class="comment">//Array form of unique_ptr demo</span></div><div class="line">  &#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;D[]&gt; p&#123;<span class="keyword">new</span> D[<span class="number">3</span>]&#125;;</div><div class="line">  &#125; <span class="comment">// calls ~D 3 times</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>get()</code> and <code>release()</code> can return the raw pointer managed by <code>unique_ptr</code> object.<code>release()</code> will release the <code>unique_ptr</code> object from responsibility of deleting the managed object, but <code>get()</code> will not.</p><figure class="highlight c"><figcaption><span>get() and release()</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">                                         <span class="comment">// foo   bar    p</span></div><div class="line">                                         <span class="comment">// ---   ---   ---</span></div><div class="line"><span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;<span class="keyword">int</span>&gt; foo;                <span class="comment">// null</span></div><div class="line"><span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;<span class="keyword">int</span>&gt; bar;                <span class="comment">// null  null</span></div><div class="line"><span class="keyword">int</span>* p = <span class="literal">nullptr</span>;                        <span class="comment">// null  null  null</span></div><div class="line"></div><div class="line">foo = <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;<span class="keyword">int</span>&gt;(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>)); <span class="comment">// (10)  null  null</span></div><div class="line">bar = <span class="built_in">std</span>::move(foo);                    <span class="comment">// null  (10)  null</span></div><div class="line">p = bar.get();                           <span class="comment">// null  (10)  (10)</span></div><div class="line">*p = <span class="number">20</span>;                                 <span class="comment">// null  (20)  (20)</span></div><div class="line">p = <span class="literal">nullptr</span>;                             <span class="comment">// null  (20)  null</span></div><div class="line"></div><div class="line">foo = <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;<span class="keyword">int</span>&gt;(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">30</span>)); <span class="comment">// (30)  (20)  null</span></div><div class="line">p = foo.release();                       <span class="comment">// null  (20)  (30)</span></div><div class="line">*p = <span class="number">40</span>;                                 <span class="comment">// null  (20)  (40)</span></div><div class="line"></div><div class="line"><span class="keyword">delete</span> p;   <span class="comment">// the program is now responsible of deleting the object pointed to by p</span></div><div class="line">            <span class="comment">// bar deletes its managed object automatically</span></div><div class="line"></div></pre></td></tr></table></figure><h2 id="shared-ptr"><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a>shared_ptr</h2><p><code>shared_ptr</code> is a smart pointer that retains shared ownership of an object through a pointer. Several <code>shared_ptr</code> object may own the same object. The object is destoryed when either of following happens:</p><ul><li>the last remaining <code>shared_ptr</code> owning the object is destoryed.</li><li>the last remaining <code>shared_ptr</code> owning the object is assigned another one via <code>operator=</code> or <code>reset()</code>.</li></ul><p>A typical <code>shared_ptr</code> holds two pointers:</p><ul><li>the stored pointer (return by <code>get()</code>).</li><li>a pointer to <em>control block</em>.<br>The <em>control block</em> pointers to a object that holds the number of <code>shared_ptr</code> who point to the managed object.</li></ul><p>A poor sample for <code>shared_ptr</code> implementation:<br><figure class="highlight c"><figcaption><span>sample for shared_ptr</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartPtr</span>;</span> <span class="comment">// declare a template class for friend class.</span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">U_Ptr</span> &#123;</span> <span class="comment">// control block</span></div><div class="line"> <span class="keyword">private</span>:</div><div class="line">  <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">SmartPtr</span>&lt;T&gt;;</span>      <span class="comment">// private friend class which can access members of control block.</span></div><div class="line">  <span class="comment">// all following are private means they can be called by friend class only.</span></div><div class="line">  U_Ptr(T *ptr) :p(ptr), count(<span class="number">1</span>) &#123; &#125;</div><div class="line">  ~U_Ptr() &#123; <span class="keyword">delete</span> p; &#125;</div><div class="line">  <span class="keyword">int</span> count;  <span class="comment">// counter for number of shared_ptr that points to the same object.</span></div><div class="line">  <span class="comment">// points to managed object.</span></div><div class="line">  T *p;                                                      </div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartPtr</span> &#123;</span>  <span class="comment">// smart pointer class</span></div><div class="line"> <span class="keyword">public</span>:</div><div class="line">  SmartPtr(T *ptr) : rp(<span class="keyword">new</span> U_Ptr&lt;T&gt;(ptr)) &#123; &#125;      <span class="comment">// contructor makes control block to manage object.</span></div><div class="line">  SmartPtr(<span class="keyword">const</span> SmartPtr&lt;T&gt; &amp;sp) :rp(sp.rp) &#123; ++rp-&gt;count; &#125;  <span class="comment">// copy constructor</span></div><div class="line">  SmartPtr&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> SmartPtr&lt;T&gt;&amp; rhs) &#123;     <span class="comment">// assignment operator</span></div><div class="line">    ++rhs.rp-&gt;count;</div><div class="line">    <span class="keyword">if</span> (--rp-&gt;count == <span class="number">0</span>)</div><div class="line">      <span class="keyword">delete</span> rp;</div><div class="line">    rp = rhs.rp;</div><div class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  T&amp; <span class="keyword">operator</span>*()  &#123;       <span class="comment">// overload * operator. </span></div><div class="line">    <span class="keyword">return</span> *(rp-&gt;p);</div><div class="line">  &#125;</div><div class="line">  T* <span class="keyword">operator</span> -&gt;() &#123;      <span class="comment">// overload -&gt; operator.  </span></div><div class="line">    <span class="keyword">return</span> rp-&gt;p;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  ~SmartPtr() &#123;        <span class="comment">// distructor</span></div><div class="line">    <span class="keyword">if</span> (--rp-&gt;count == <span class="number">0</span>)    <span class="comment">// when counter is 0, delete control block which lead to distruct managed object.</span></div><div class="line">      <span class="keyword">delete</span> rp;</div><div class="line">  &#125;</div><div class="line"> <span class="keyword">private</span>:</div><div class="line">  U_Ptr&lt;T&gt; *rp;  <span class="comment">// pointer to control block.</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This post will introduce two types of smart pointers, which can help programmers to manage objects allocated in heap. &lt;/p&gt;
    
    </summary>
    
      <category term="Program" scheme="https://nannanmath.github.io/categories/Program/"/>
    
    
      <category term="c++" scheme="https://nannanmath.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Two ways for separating interface from implementation</title>
    <link href="https://nannanmath.github.io/2017/06/13/Two-ways-for-separating-interface-from-implementation/"/>
    <id>https://nannanmath.github.io/2017/06/13/Two-ways-for-separating-interface-from-implementation/</id>
    <published>2017-06-13T03:33:52.000Z</published>
    <updated>2017-10-09T04:21:06.311Z</updated>
    
    <content type="html"><![CDATA[<p>Usually, the providers of a program want to hide the module’s concrete technique implementation. In this post, two ways for this goal will be introduced. One is called <em>pImpl</em>, another is <em>pure abstract class</em>.</p><a id="more"></a><h2 id="pImpl"><a href="#pImpl" class="headerlink" title="pImpl"></a>pImpl</h2><p><em>pImpl</em> means “pointer to Implementation” which is a C++ programming technique. It can remove the implementation details of a class from its object representation by placing them in a separate class. <em>pImpl</em> can break the compilation dependency, changes to the implementation will not cause recompilation. So if a library uses <em>pImpl</em> as its interface, new version of the library may change implementation while remaining the interface with older versions.</p><p>As the object of the interface type controls the lifetime of object of the implementation type, the pointer to the implementation type is usually <code>std::unique_ptr</code>. </p><figure class="highlight c"><figcaption><span>widget.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">widget</span> &#123;</span></div><div class="line"> <span class="keyword">public</span>:</div><div class="line">  widget();</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Dosomething</span><span class="params">()</span></span>;</div><div class="line"> <span class="keyword">private</span>:</div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">impl</span>;</span>  <span class="comment">// forward declaration of the implementation class</span></div><div class="line">  <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;impl&gt; pImpl; <span class="comment">// to the forward-declared implementation class</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>widget.cpp</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"widget.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Impl.h"</span></span></div><div class="line"></div><div class="line">widget::widget() &#123;</div><div class="line">  pImpl.reset(<span class="keyword">new</span> Impl());</div><div class="line">&#125;</div><div class="line"></div><div class="line">widget::Dosomething() &#123;</div><div class="line">  pImpl -&gt; Dosomething();</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>Impl.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"widget.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">widget</span>:</span>:Impl &#123;</div><div class="line"> <span class="keyword">public</span>:</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Dosomething</span><span class="params">()</span></span>;</div><div class="line"> <span class="keyword">private</span>:</div><div class="line">  <span class="comment">// some private members,</span></div><div class="line">  <span class="comment">// that will be hiden in class widget.</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>Impl.cpp</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"widget.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">void</span> widget::Impl::Dosomething() &#123;</div><div class="line">  <span class="comment">// do something.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Pure-abstract-class"><a href="#Pure-abstract-class" class="headerlink" title="Pure abstract class"></a>Pure abstract class</h2><p><em>Pure abstract class</em> is the class which includes pure virtual functions as its member functions. This type of class should not be instantiated but used as a base class. Usually, it plays a role as an interface class in programming.</p><figure class="highlight c"><figcaption><span>ITest.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ITest</span> &#123;</span></div><div class="line"> <span class="keyword">public</span>:</div><div class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Dosomething</span><span class="params">()</span> </span>= <span class="number">0</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// define a factory.</span></div><div class="line"><span class="built_in">shared_ptr</span>&lt;ITest&gt; Test_factory();</div><div class="line"></div></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>Test.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ITest.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> :</span> <span class="keyword">public</span> ITest &#123;</div><div class="line"> <span class="keyword">public</span>:</div><div class="line">  <span class="function">virtaul <span class="keyword">void</span> <span class="title">Dosomething</span><span class="params">()</span></span>;</div><div class="line"> <span class="keyword">private</span>:</div><div class="line">  Test();</div><div class="line">  Test(<span class="keyword">const</span> Test&amp;);</div><div class="line">  Test&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Test&amp;);</div><div class="line"> <span class="keyword">protected</span>:</div><div class="line">  <span class="built_in">shared_ptr</span>&lt;ITest&gt; Test_factory();</div><div class="line">&#125;;</div></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>Test.cpp</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Test.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">void</span> Test::Dosomething() &#123;</div><div class="line">  <span class="comment">// do something.</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">shared_ptr</span>&lt;ITest&gt; Test_factory() &#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">shared_ptr</span>&lt;ITest&gt;(<span class="keyword">new</span> Test);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>To set constructor, copy constructor and assignment operator as private member, the object of implementation class can only be instantiated by factory function. Meanwhile, the factory function should be included as a protect member of implementation class for accessing its private constructor.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Usually, the providers of a program want to hide the module’s concrete technique implementation. In this post, two ways for this goal will be introduced. One is called &lt;em&gt;pImpl&lt;/em&gt;, another is &lt;em&gt;pure abstract class&lt;/em&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="Program" scheme="https://nannanmath.github.io/categories/Program/"/>
    
    
      <category term="c++" scheme="https://nannanmath.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>explicit constructor</title>
    <link href="https://nannanmath.github.io/2017/06/07/explicit-constructor/"/>
    <id>https://nannanmath.github.io/2017/06/07/explicit-constructor/</id>
    <published>2017-06-07T09:08:00.000Z</published>
    <updated>2017-10-09T04:21:06.314Z</updated>
    
    <content type="html"><![CDATA[<p>This post will introduce a key word <em>explicit</em> that can forbid the implicit type casting by constructor with only one parameter.</p><a id="more"></a><h2 id="Implicit-type-casting"><a href="#Implicit-type-casting" class="headerlink" title="Implicit type casting"></a>Implicit type casting</h2><p>In C++ class, a constructor with only one parameter (or parameters with default values except the first one) has two functions. One is to contruct an object, another is that will be called when an implicit type casting is performed. However, this is not always good. In some cases, it will lead to logical error.</p><figure class="highlight c"><figcaption><span>implicit_casting</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyString</span> &#123;</span></div><div class="line"> <span class="keyword">public</span>:</div><div class="line">  MyString(<span class="keyword">const</span> <span class="keyword">char</span>* p) &#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"char constructor"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  MyString(<span class="keyword">int</span> n) &#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"int constructor"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="function">MyString <span class="title">s1</span><span class="params">(<span class="string">"Hello"</span>)</span></span>;   <span class="comment">// explicit call MyString(const char* p)</span></div><div class="line">  <span class="function">MyString <span class="title">s2</span><span class="params">(<span class="number">1</span>)</span></span>;         <span class="comment">// explicit call MyString(int n)</span></div><div class="line">  MyString s3 = <span class="string">"Hello"</span>;  <span class="comment">// implicit call MyString(const char* p)</span></div><div class="line">  MyString s4 = <span class="number">1</span>;        <span class="comment">// implicit call MyString(int n)</span></div><div class="line">  <span class="keyword">char</span> chr = <span class="string">'a'</span>;</div><div class="line">  MyString s5 = chr;      <span class="comment">// implicit call MyString(int n) with type casting</span></div><div class="line">  </div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>The result is:</p><figure class="highlight bash"><figcaption><span>result</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">char constructor</div><div class="line">int constructor</div><div class="line">char constructor</div><div class="line">int constructor</div><div class="line">int constructor // s5, implict casting</div></pre></td></tr></table></figure><p>In this case, <code>chr</code> is a <code>char</code> type and <code>MyString s5 = chr;</code> will be interpreted by compiler as <code>MyString s5 = MyString((int)chr)</code> where <code>chr</code> is implicitly cast to <code>int</code>. This logical error is caused by the constructor <code>MyString(int n)</code> which make this implicit casting enable. To avoid this, the key word <code>explicit</code> should be used to restrict it.</p><figure class="highlight c"><figcaption><span>implicit_casting</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyString</span> &#123;</span></div><div class="line"> <span class="keyword">public</span>:</div><div class="line">  MyString(<span class="keyword">const</span> <span class="keyword">char</span>* p) &#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"char constructor"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">MyString</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"int constructor"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="function">MyString <span class="title">s1</span><span class="params">(<span class="string">"Hello"</span>)</span></span>;   <span class="comment">// explicit call MyString(const char* p)</span></div><div class="line">  <span class="function">MyString <span class="title">s2</span><span class="params">(<span class="number">1</span>)</span></span>;         <span class="comment">// explicit call MyString(int n)</span></div><div class="line">  MyString s3 = <span class="string">"Hello"</span>;  <span class="comment">// implicit call MyString(const char* p)</span></div><div class="line">  MyString s4 = <span class="number">1</span>;        <span class="comment">// error,  invalid conversion from ‘int’ to ‘const char*’</span></div><div class="line">  <span class="keyword">char</span> chr = <span class="string">'a'</span>;</div><div class="line">  MyString s5 = chr;      <span class="comment">// error,  invalid conversion from ‘char’ to ‘const char*’</span></div><div class="line">  </div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>To restrict by <code>explicit</code>, only <code>MyString(const char* p)</code> can be used for implicit casting and it will cause compile-time error.</p><h2 id="Copy-contructor"><a href="#Copy-contructor" class="headerlink" title="Copy contructor"></a>Copy contructor</h2><p>There are three cases where the implicit casting will be performed by copy constructor.</p><ol><li>An object is passed into a function by <em>pass-by-value</em>.</li><li>An object is retured from a function by <em>pass-by-value</em>.</li><li>Call like: <code>Myclass myobj1 = myobj2;</code> where <code>myobj2</code> is another object of <code>Myclass</code>.</li></ol><p>So if restricting a copy constructor by <code>explicit</code>, all operations above will cause error in compiling. That means <code>explicit</code> is not a good design for copy constructor. </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This post will introduce a key word &lt;em&gt;explicit&lt;/em&gt; that can forbid the implicit type casting by constructor with only one parameter.&lt;/p&gt;
    
    </summary>
    
      <category term="Program" scheme="https://nannanmath.github.io/categories/Program/"/>
    
    
      <category term="c++" scheme="https://nannanmath.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Copy Constructors and Assignment Operators</title>
    <link href="https://nannanmath.github.io/2017/06/07/copy-constructors-and-assignment-operators/"/>
    <id>https://nannanmath.github.io/2017/06/07/copy-constructors-and-assignment-operators/</id>
    <published>2017-06-07T03:10:39.000Z</published>
    <updated>2017-10-09T04:21:06.313Z</updated>
    
    <content type="html"><![CDATA[<p>This post will introduce two members in C++ class. The first is <em>copy constructor</em> that can perform a <em>deep</em> copy for member variables. Another one is <em>assignment operator</em> which is used to assign one to another by overloading <code>=</code> operator.</p><a id="more"></a><h2 id="Compiler-provided"><a href="#Compiler-provided" class="headerlink" title="Compiler provided"></a>Compiler provided</h2><p>Usually, if there is no copy constructors and assignment operator in a class, the compiler will give default ones of <em>member-wise</em> copy version.</p><figure class="highlight c"><figcaption><span>copy_constructor_and_assignment_operator</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Myclass (<span class="keyword">const</span> Myclass&amp; a)</div><div class="line">Myclass&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> Myclass&amp; a);</div></pre></td></tr></table></figure><p>which means, for a class:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> &#123;</span></div><div class="line">  <span class="keyword">int</span> x;</div><div class="line">  <span class="keyword">char</span> c;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> s;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><br>the default <em>copy constructor</em> and <em>assignment operator</em> provided by compiler like:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// default copy constructor:</span></div><div class="line">MyClass::MyClass( <span class="keyword">const</span> MyClass&amp; other ) :</div><div class="line">  x( other.x ), c( other.c ), s( other.s )</div><div class="line">  &#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// default assignment operator:</span></div><div class="line">MyClass&amp; MyClass::<span class="keyword">operator</span>=( <span class="keyword">const</span> MyClass&amp; other ) &#123;</div><div class="line">  x = other.x;</div><div class="line">  c = other.c;</div><div class="line">  s = other.s;</div><div class="line">  <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>In many cases, this is sufficient. However, there are some circumstances where the <em>member-wise</em> copy version is not good enough. The commont reason of that is the object contains a raw pointer witch points to a block of memory. In this case, the <em>member-wise</em> copy is likely to lead to more than one pointers that points to the same block of memory which will be a heap curruption in objects destruction.</p><p>To avoid this curruption, <em>copy constructor</em> and <em>assignment operator</em> need to be implemented.</p><h2 id="Copy-constructor-amp-Assignment-operator"><a href="#Copy-constructor-amp-Assignment-operator" class="headerlink" title="Copy constructor &amp; Assignment operator"></a>Copy constructor &amp; Assignment operator</h2><figure class="highlight c"><figcaption><span>copy_constructor</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">String</span> &#123;</span></div><div class="line"> <span class="keyword">public</span>:</div><div class="line">  String(<span class="keyword">const</span> <span class="keyword">char</span>* str);</div><div class="line">  String(<span class="keyword">const</span> String&amp; other);</div><div class="line">  String&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> String&amp; other);</div><div class="line">  ~String(); </div><div class="line"> <span class="keyword">private</span>:</div><div class="line">  <span class="keyword">char</span> *m_data;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">String::String(<span class="keyword">const</span> <span class="keyword">char</span>* str) &#123;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"constructor"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="keyword">if</span> (str == <span class="literal">NULL</span>) &#123;</div><div class="line">    m_data = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1</span>];</div><div class="line">    *m_data = <span class="string">'\0'</span>;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">if</span> (m_data)</div><div class="line">      <span class="keyword">delete</span>[] m_data;</div><div class="line">    <span class="keyword">int</span> length = <span class="built_in">strlen</span>(str);</div><div class="line">    m_data = <span class="keyword">new</span> <span class="keyword">char</span>[length + <span class="number">1</span>];</div><div class="line">    <span class="built_in">strcpy</span>(m_data, str);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">String::String(<span class="keyword">const</span> String&amp; other) &#123;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"copy constructor"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="keyword">int</span> length = <span class="built_in">strlen</span>(other.m_data);</div><div class="line">  m_data = <span class="keyword">new</span> <span class="keyword">char</span>[length + <span class="number">1</span>];</div><div class="line">  <span class="built_in">strcpy</span>(m_data, other.m_data);</div><div class="line">&#125;</div><div class="line"></div><div class="line">String&amp; String::<span class="keyword">operator</span>=(<span class="keyword">const</span> String&amp; other) &#123;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"assignment operator"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;other) &#123;</div><div class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">delete</span>[] m_data;</div><div class="line">    <span class="keyword">int</span> length = <span class="built_in">strlen</span>(other.m_data);</div><div class="line">    m_data = <span class="keyword">new</span> <span class="keyword">char</span>[length + <span class="number">1</span>];</div><div class="line">    <span class="built_in">strcpy</span>(m_data, other.m_data);</div><div class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">String::~String() &#123;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"destructor"</span> &lt;&lt; <span class="built_in">endl</span>; </div><div class="line">  <span class="keyword">delete</span> [] m_data;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"a(\"abc\")"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="function">String <span class="title">a</span><span class="params">(<span class="string">"abc"</span>)</span></span>;  <span class="comment">// constructor.</span></div><div class="line"></div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"b(\"cde\")"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="function">String <span class="title">b</span><span class="params">(<span class="string">"cde"</span>)</span></span>;  <span class="comment">// constructor.</span></div><div class="line"></div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">" d = a"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  String d = a;     <span class="comment">// copy constructor. (NOTE)</span></div><div class="line"></div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"c(b)"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="function">String <span class="title">c</span><span class="params">(b)</span></span>;      <span class="comment">// copy constructor.</span></div><div class="line"></div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"c = a"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  c = a;            <span class="comment">// assignment operator.</span></div><div class="line"></div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Many of the STL containers and algorithms require that an object should be copyable. Typically, this means that you need to have the copy constructor that takes a <em>const</em> reference.</p><h2 id="Disallow-Copy-constructor-and-Assignment-operator"><a href="#Disallow-Copy-constructor-and-Assignment-operator" class="headerlink" title="Disallow Copy constructor and Assignment operator"></a>Disallow Copy constructor and Assignment operator</h2><p>In some cases, it is not a safe operation to copy or assign an object. So, its copy constructor or assignment operator should be disabled explicitly. The most commont way for this is to make private constructor or operator and provide no implementation. Generally, a macro can be used to simplify this procedure.</p><figure class="highlight c"><figcaption><span>Disallow_copy_and_assign</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// define a macro.</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DISALLOW_COPY_AND_ASSIGN(TypeName) \</span></div><div class="line">  TypeName(<span class="keyword">const</span> TypeName&amp;);</div><div class="line">  <span class="keyword">void</span> <span class="keyword">operator</span>=(<span class="keyword">const</span> TypeName&amp;)</div><div class="line"></div><div class="line"><span class="comment">// use the macro.</span></div><div class="line">class Foo &#123;</div><div class="line"> <span class="keyword">public</span>:</div><div class="line">  <span class="keyword">explicit</span> Foo(<span class="keyword">int</span> f);</div><div class="line"></div><div class="line"> <span class="keyword">private</span>:</div><div class="line">  DISALLOW_COPY_AND_ASSIGN(Foo);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="push-back-of-STL-vector-container"><a href="#push-back-of-STL-vector-container" class="headerlink" title="push_back() of STL vector container"></a>push_back() of STL vector container</h2><p><code>push_back()</code> operator in vector container will perform a <em>deep-copy</em> of object. Actually, <code>push_back()</code> will call <code>insert()</code> in low level.</p><figure class="highlight c"><figcaption><span>push_back_in_vector_container</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span></div><div class="line">  <span class="keyword">int</span> x;</div><div class="line">  <span class="keyword">int</span> y;</div><div class="line">&#125;Point;</div><div class="line"></div><div class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; output, <span class="keyword">const</span> Point &amp;a) &#123;</div><div class="line">  <span class="keyword">return</span> output &lt;&lt; a.x &lt;&lt;<span class="string">" "</span>&lt;&lt; a.y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">  Point * a = <span class="keyword">new</span> Point;</div><div class="line">  <span class="built_in">vector</span>&lt;Point&gt; PointList;</div><div class="line"></div><div class="line"></div><div class="line">  a-&gt;x = <span class="number">3</span>;</div><div class="line">  a-&gt;y = <span class="number">4</span>;</div><div class="line">  PointList.push_back(*a);</div><div class="line"></div><div class="line">  a-&gt;x = <span class="number">4</span>;</div><div class="line">  a-&gt;y = <span class="number">4</span>;</div><div class="line">  PointList.push_back(*a);</div><div class="line"></div><div class="line">  a-&gt;x = <span class="number">5</span>;</div><div class="line">  a-&gt;y = <span class="number">4</span>;</div><div class="line">  PointList.push_back(*a);</div><div class="line"></div><div class="line">  <span class="keyword">delete</span> a;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="built_in">vector</span>&lt;Point&gt;::iterator i = PointList.begin(); i != PointList.end(); i++) &#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; (*i)&lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>result is:<br><figure class="highlight bash"><figcaption><span>result</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">3 4</div><div class="line">4 4</div><div class="line">5 4</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This post will introduce two members in C++ class. The first is &lt;em&gt;copy constructor&lt;/em&gt; that can perform a &lt;em&gt;deep&lt;/em&gt; copy for member variables. Another one is &lt;em&gt;assignment operator&lt;/em&gt; which is used to assign one to another by overloading &lt;code&gt;=&lt;/code&gt; operator.&lt;/p&gt;
    
    </summary>
    
      <category term="Program" scheme="https://nannanmath.github.io/categories/Program/"/>
    
    
      <category term="c++" scheme="https://nannanmath.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Type casting in C++</title>
    <link href="https://nannanmath.github.io/2017/05/26/new1/"/>
    <id>https://nannanmath.github.io/2017/05/26/new1/</id>
    <published>2017-05-26T09:51:31.000Z</published>
    <updated>2017-10-09T04:21:06.321Z</updated>
    
    <content type="html"><![CDATA[<p>This post will introduce four specific casting operators that are most frequently used in C++ project. They include <code>static_cast</code>, <code>dynamic_cast</code>, <code>const_cast</code> and <code>reinterpret_cast</code>. The differences between of them will be told with some code samples.</p><a id="more"></a><h2 id="staic-cast-lt-type-id-gt-expression"><a href="#staic-cast-lt-type-id-gt-expression" class="headerlink" title="staic_cast &lt;type-id&gt; (expression)"></a>staic_cast &lt;type-id&gt; (expression)</h2><p><code>staic_cast</code> should be the first considered operator for type conversion. It can perform <em>upcast</em> and <em>downcast</em> conversion but does not perform any <em>type-safety checks</em>. So, <code>staic_cast</code> is not a safe opeation for <em>downcast</em> conversion and up to programers to ensure the conversion is safe. However, <code>staic_cast</code> does not incur the overhead of the <code>type-safety checks</code>.</p><h2 id="dynamic-cast-lt-type-id-gt-expression"><a href="#dynamic-cast-lt-type-id-gt-expression" class="headerlink" title="dynamic_cast &lt;type-id&gt; (expression)"></a>dynamic_cast &lt;type-id&gt; (expression)</h2><p><code>dynamic_cast</code> should be used for conversion of pointers or references to classes. This operator can ensure that the result of type conversion points to a valid complete object.</p><p>Conversion by <code>dynamic_cast</code> includes <em>pointer upcast</em> (converting from pointer-to-derived to pointer-to-base) naturally as allowed as an implicit conversion. Specifically, when do a <em>downcast</em> (convert from pointer-to-base to pointer-to-derived) conversion, <code>dynamic_cast</code> will do a <em>type check</em> to ensure the pointed object is a valid complete object of the target type. So, <code>dynamic_cast</code> is a safe operator for <em>downcast</em> conversion.</p><figure class="highlight c"><figcaption><span>dynamic_cast</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;exception&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span> <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">dummy</span><span class="params">()</span> </span>&#123;&#125; &#125;;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span>:</span> <span class="keyword">public</span> Base &#123; <span class="keyword">int</span> a; &#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    Base * pba = <span class="keyword">new</span> Derived;</div><div class="line">    Base * pbb = <span class="keyword">new</span> Base;</div><div class="line">    Derived * pd;</div><div class="line"></div><div class="line">    pd = <span class="keyword">dynamic_cast</span>&lt;Derived*&gt;(pba);</div><div class="line">    <span class="keyword">if</span> (pd==<span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">"Null pointer on first type-cast.\n"</span>;</div><div class="line"></div><div class="line">    pd = <span class="keyword">dynamic_cast</span>&lt;Derived*&gt;(pbb);</div><div class="line">    <span class="keyword">if</span> (pd==<span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">"Null pointer on second type-cast.\n"</span>;</div><div class="line"></div><div class="line">  &#125; <span class="keyword">catch</span> (exception&amp; e) &#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"Exception: "</span> &lt;&lt; e.what();&#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure><p>The output is:<br><figure class="highlight bash"><figcaption><span>dynamic_cast_output</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Null pointer on second <span class="built_in">type</span>-cast.</div></pre></td></tr></table></figure></p><h2 id="const-cast-lt-type-id-gt-expression"><a href="#const-cast-lt-type-id-gt-expression" class="headerlink" title="const_cast &lt;type-id&gt; (expression)"></a>const_cast &lt;type-id&gt; (expression)</h2><p><code>const_cast</code> can set or remove the constness of the object pointed by a pointer. However, it should be noted that actually this type of casting is not designed for modifing the value of a const object, but for faciliting program. For example, if a const pointer needs to pass to a function that expects a non-const argument:</p><figure class="highlight c"><figcaption><span>const_cast</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span> <span class="params">(<span class="keyword">char</span> * str)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="string">'\n'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">const</span> <span class="keyword">char</span> * c = <span class="string">"sample text"</span>;</div><div class="line">  print ( <span class="keyword">const_cast</span>&lt;<span class="keyword">char</span> *&gt; (c) );</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>The output is:<br><figure class="highlight bash"><figcaption><span>const_cast</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sample text</div></pre></td></tr></table></figure></p><p>This example above can work because in function <code>print</code> does not write to the pointer. Note that, it will cause <em>undefined behavior</em> to write to a removing constness of a pointed object.</p><h2 id="reinterpret-cast-lt-type-id-gt-expression"><a href="#reinterpret-cast-lt-type-id-gt-expression" class="headerlink" title="reinterpret_cast &lt;type-id&gt; (expression)"></a>reinterpret_cast &lt;type-id&gt; (expression)</h2><p><code>reinterpret_cast</code> can convert any pointer type to any other pointer type, even of unrelated classes. That means the operation in this conversion is a binary copy only and no check will be performed.  <code>reinterpret_cast</code> can also cast pointers to or from integer types. The format in which the integer value represents a pointer is platform-specific. The operations which can be performed by <code>reinterpret_cast</code> but not <code>static_cast</code> are low-level operations based on reinterpreting the binary representations of the type. On most cases, this conversion results in code which is system-specific.</p><figure class="highlight c"><figcaption><span>const_cast</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span> <span class="comment">/* ... */</span> &#125;;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span> <span class="comment">/* ... */</span> &#125;;</div><div class="line">A * a = <span class="keyword">new</span> A;</div><div class="line">B * b = <span class="keyword">reinterpret_cast</span>&lt;B*&gt;(a);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This post will introduce four specific casting operators that are most frequently used in C++ project. They include &lt;code&gt;static_cast&lt;/code&gt;, &lt;code&gt;dynamic_cast&lt;/code&gt;, &lt;code&gt;const_cast&lt;/code&gt; and &lt;code&gt;reinterpret_cast&lt;/code&gt;. The differences between of them will be told with some code samples.&lt;/p&gt;
    
    </summary>
    
      <category term="Program" scheme="https://nannanmath.github.io/categories/Program/"/>
    
    
      <category term="c++" scheme="https://nannanmath.github.io/tags/c/"/>
    
  </entry>
  
</feed>
